// Code generated by gokit v0.0.1. DO NOT EDIT.

package service

import (
	"context"

	"github.com/bongnv/gokit/examples/hello"
	"github.com/go-kit/kit/endpoint"
)

// endpoints ...
type endpoints struct {
	HelloEndpoint endpoint.Endpoint
	ByeEndpoint   endpoint.Endpoint
}

// makeEndpoints returns an Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func makeEndpoints(s hello.Service) endpoints {
	return endpoints{
		HelloEndpoint: makeHelloEndpoint(s),
		ByeEndpoint:   makeByeEndpoint(s),
	}
}

// makeEndpoint returns an endpoint via the passed service.
func makeHelloEndpoint(s hello.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var (
			resp interface{}
			err  error
		)

		req := request.(*hello.Request)
		resp, err = s.Hello(ctx, req)

		return resp, err
	}
}

// makeEndpoint returns an endpoint via the passed service.
func makeByeEndpoint(s hello.Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var (
			resp interface{}
			err  error
		)

		req := request.(*hello.ByeRequest)
		resp, err = s.Bye(ctx, req)

		return resp, err
	}
}
