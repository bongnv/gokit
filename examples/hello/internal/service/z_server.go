// Code generated by gokit v0.0.1. DO NOT EDIT.

package service

import (
	"context"
	"net/http"

	"github.com/bongnv/gokit/examples/hello"
	"github.com/bongnv/gokit/util/httputil"
	"github.com/bongnv/gokit/util/server"
)

// GetOptions ...
func GetOptions(s hello.Service) []server.Option {
	serverEndpoints := makeEndpoints(s)

	opts := []server.Option{}

	opts = append(opts, getHTTPOptions(serverEndpoints)...)

	return opts
}

func getHTTPOptions(serverEndpoints endpoints) []server.Option {
	opts := []server.Option{}

	opts = append(opts,
		server.WithHTTPEndpoint(server.Endpoint{
			Method:         "",
			Path:           "/hello",
			Endpoint:       serverEndpoints.HelloEndpoint,
			RequestDecoder: decodeHelloRequest,
		}),
		server.WithHTTPEndpoint(server.Endpoint{
			Method:         "",
			Path:           "/bye",
			Endpoint:       serverEndpoints.ByeEndpoint,
			RequestDecoder: decodeByeRequest,
		}),
	)

	return opts
}

func decodeHelloRequest(_ context.Context, r *http.Request) (request interface{}, err error) {
	req := &hello.Request{}

	if err := httputil.DecodeRequest(r, req); err != nil {
		return nil, err
	}

	return req, err
}

func decodeByeRequest(_ context.Context, r *http.Request) (request interface{}, err error) {
	req := &hello.ByeRequest{}

	if err := httputil.DecodeRequest(r, req); err != nil {
		return nil, err
	}

	return req, err
}
