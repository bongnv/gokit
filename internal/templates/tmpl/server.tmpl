{{- $packageName := .PackageName }}
{{- $serviceInterface := printf "%s.%s" .PackageName .Name -}}
{{- $serviceName := .Name }}

package {{ toLower $serviceName }}

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/bongnv/gokit/util/server"
	"{{ .Package }}"
	"{{ .Package }}/internal/endpoint"
)

// GetOptions ...
func GetOptions(s {{ $serviceInterface  }}) []server.Option {
	serverEndpoints := makeEndpoints(s)

	opts := []server.Option{}

	opts = append(opts,getHTTPOptions(serverEndpoints)...,)

	return opts
}

func getHTTPOptions(serverEndpoints endpoints) []server.Option {
	opts := []server.Option{}

	opts = append(opts,
    {{range $endpoint := .Endpoints -}}
        server.WithHTTPEndpoint(server.Endpoint{
            Method:         "{{ $endpoint.Method }}",
            Path:           "{{ $endpoint.HTTPPath }}",
            Endpoint:       serverEndpoints.{{ $endpoint.Name }}Endpoint,
		{{- if eq (len $endpoint.Params) 1}}
			RequestDecoder: nil,
		{{ else }}
        	RequestDecoder: decode{{ $endpoint.Name}}Request,
		{{ end -}}
        }),
    {{ end -}}
	)

	return opts
}

{{ range $endpoint := .Endpoints }}
{{ if ge (len $endpoint.Params) 2}}
func decode{{ $endpoint.Name}}Request(_ context.Context, r *http.Request) (request interface{}, err error) {
	{{- $requestType := (index $endpoint.Params 1).Type }}
	var req {{ $requestType }}
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		return nil, err
	}

	return req, err
}
{{ end }}
{{end}}
