{{- $packageName := .PackageName }}
{{- $serviceInterface := printf "%s.%s" .PackageName .Name -}}
{{- $serviceName := .Name }}

package {{ toLower $serviceName }}

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	"{{ .Package }}"
)

// endpoints ...
type endpoints struct {
{{ range $endpoint := .Endpoints }}
	{{- $endpoint.Name }}Endpoint endpoint.Endpoint
{{ end -}}
}

// makeEndpoints returns an Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func makeEndpoints(s {{ $serviceInterface }}) endpoints {
	return endpoints{
	{{ range $endpoint := .Endpoints }}
		{{- $endpoint.Name }}Endpoint: make{{ $serviceName }}{{ $endpoint.Name }}Endpoint(s),
	{{ end -}}
	}
}

{{ range $endpoint := .Endpoints }}
// make{{ $endpoint.Name }}Endpoint returns an endpoint via the passed service.
func make{{ $serviceName }}{{ $endpoint.Name }}Endpoint(s {{ $serviceInterface }}) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
	{{- $requestType := (index $endpoint.Params 1).Type }}
		req := request.({{ $requestType }})
		resp, e := s.{{ $endpoint.Name }}(ctx, req)
		return resp, e
	}
}
{{end}}