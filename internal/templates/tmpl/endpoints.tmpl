{{- $packageName := .PackageName -}}
{{- $serviceInterface := printf "%s.%s" .PackageName .Name -}}
{{- $serviceName := .Name -}}

package {{ toLower $serviceName }}

import (
	"context"

	"github.com/go-kit/kit/endpoint"
	"{{ .Package }}"
)

// endpoints ...
type endpoints struct {
{{ range $endpoint := .Endpoints }}
	{{- $endpoint.Name }}Endpoint endpoint.Endpoint
{{ end -}}
}

// makeEndpoints returns an Endpoints struct where each endpoint invokes
// the corresponding method on the provided service.
func makeEndpoints(s {{ $serviceInterface }}) endpoints {
	return endpoints{
	{{ range $endpoint := .Endpoints }}
		{{- $endpoint.Name }}Endpoint: make{{ $endpoint.Name }}Endpoint(s),
	{{ end -}}
	}
}

{{ range $endpoint := .Endpoints }}
// makeEndpoint returns an endpoint via the passed service.
func make{{ $endpoint.Name }}Endpoint(s {{ $serviceInterface }}) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		var (
			resp interface{}
			err error
		)
		{{ $leftSide := "resp, err" -}}
		{{- if eq (len $endpoint.Results) 1 }}
			{{- $leftSide = "err" -}}
		{{ end }}

	{{if eq (len $endpoint.Params) 1}}
		{{ $leftSide }} = s.{{ $endpoint.Name }}(ctx)
	{{ else }}
		{{- $requestType := (index $endpoint.Params 1).Type }}
		req := request.({{ $requestType }})
		{{ $leftSide }} = s.{{ $endpoint.Name }}(ctx, req)
	{{ end }}
		return resp, err
	}
}
{{end}}