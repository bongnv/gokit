// Code generated by go-bindata.
// sources:
// tmpl/endpoints.tmpl
// tmpl/server.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplEndpointsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x8a\xdc\x3a\x10\x3c\x5b\x5f\xd1\x98\x7d\x60\xc3\x8c\xcc\xbb\x0e\xec\x29\xe4\x90\x43\xc2\x42\xf2\x03\x8a\xdc\x63\x0b\x63\xc9\xdb\x92\x27\x13\x84\xfe\x3d\x48\x96\x3d\x0e\x33\x9b\xdd\x83\x31\x52\x57\x97\xaa\xaa\xdb\xfb\x23\x3c\x4d\x42\x0e\xa2\xc3\x6f\x62\x44\x38\x3d\x03\x7f\xd9\x9d\x43\x60\x09\x63\x91\x2e\x4a\xe2\x17\xed\x90\xce\x42\x26\xe0\x44\x4a\xbb\x33\x94\xff\x59\xfe\x7d\x29\x97\x7f\x37\x1f\x43\x60\x2c\xb3\x03\xea\x76\x32\x4a\x3b\xc6\xd4\x38\x19\x72\x50\xb1\xa2\x94\x46\x3b\xbc\xba\x92\xb1\xa2\xec\x94\xeb\xe7\x9f\x5c\x9a\xb1\xe9\xcc\x71\x50\xae\x89\xdf\xda\x56\xb2\xa2\xf4\x7e\xe3\x87\x10\x4a\x56\x33\xd6\x34\xf0\x39\x23\x2c\x70\xce\x99\xfb\x3d\xe1\xee\xca\x3a\x9a\xa5\x03\xcf\xbc\x07\x12\xba\x43\x78\x5a\x19\x93\xd7\x1b\x32\x04\x56\x24\xab\x6b\x9d\xe7\x00\x56\xc8\xe6\x60\x6b\x8a\xa4\xa8\xdb\xe4\x33\x24\x2d\x5f\xc5\x80\x31\x0b\xa4\x1b\x31\xa1\x9b\x49\x5b\x10\xfa\x5e\xd7\xaf\x1e\x09\x01\x85\xec\x37\x76\x50\xfa\x62\x06\xb4\x91\xce\xf5\x08\xd2\x10\xa1\x9d\x8c\x6e\x95\xee\x60\x44\xd7\x9b\x16\x8c\x4e\xb5\x89\xcc\x45\xb5\xd8\x42\x1e\x0f\x67\xe7\x59\xcb\x47\x2a\x2a\x0b\xde\x3f\x18\x63\x08\xf5\x4e\x95\x67\xc5\xa2\xf6\x76\xe7\x63\x2a\x1f\x88\xee\xdf\xd9\x9d\x60\x14\x03\x46\x05\x6f\x21\x2a\x5b\x1f\xd2\x53\x6b\xa0\x45\xca\xf4\x23\x6f\x37\xcd\xbb\xec\xfb\x21\x6c\x44\x17\x25\x96\x14\x85\xb5\x77\x19\xbe\xaf\xf7\xed\x40\xef\x16\x65\x17\x6c\x24\xaf\xa4\xbb\x42\x5e\x7d\xfe\x69\xf9\x1f\x80\xf0\x75\x46\x1b\xe7\x9f\xb9\x7c\xa8\xa1\xda\x9d\x0e\x80\x44\x86\x6a\xf0\x79\x53\x73\xc7\x8f\xb8\xf2\xa7\xe7\x88\x6d\xf1\xba\x93\xfc\x22\x48\x8c\x16\xfe\xaf\x79\x82\xa4\x31\x11\xbe\x46\x6c\x6e\xe5\x55\x34\xb1\xe7\x09\xa1\x4e\x28\x3b\x1d\x20\xb1\x5a\xfe\x28\x86\x68\x21\x49\x5e\xd0\xc9\x5a\x6e\x5a\x26\xe7\x3d\xea\x36\x84\x3f\x01\x00\x00\xff\xff\x50\x3a\x2d\xe7\x61\x04\x00\x00")

func tmplEndpointsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplEndpointsTmpl,
		"tmpl/endpoints.tmpl",
	)
}

func tmplEndpointsTmpl() (*asset, error) {
	bytes, err := tmplEndpointsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/endpoints.tmpl", size: 1121, mode: os.FileMode(420), modTime: time.Unix(1581299067, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplServerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x4d\x6f\xdb\x3c\x0c\x3e\x5b\xbf\x82\xaf\xd1\x77\xb0\x87\x54\xc6\xae\x1e\x72\xd9\x07\xb0\x1d\xda\x05\x6b\x81\x1d\x86\x61\x50\x6d\xc6\xd1\x9a\x48\x8e\xac\x74\x29\x04\xfd\xf7\x81\x92\x3f\xe2\xa6\x68\x73\x89\x29\x3e\x24\x1f\x3e\x22\xe5\xdc\x25\x5c\xb4\xa2\xba\x17\x0d\x5e\x8b\x1d\x42\xb9\x04\xbe\x3a\xb1\xbd\x67\x01\xd3\xa1\x79\x90\x15\x7e\x55\x16\xcd\x5a\x54\x01\xd8\x1a\xa9\xec\x1a\xd2\xff\x3b\x7e\x13\xdd\xe9\x3c\xf8\xd2\x7b\xc6\xfa\xec\x40\x19\xd0\x30\x26\x77\xad\x36\x16\x32\x96\xa4\x95\x56\x16\x8f\x36\x65\x49\x8a\xaa\xd2\xb5\x54\x4d\xf1\xa7\xd3\x8a\x0e\x14\xda\x62\x63\x6d\x9b\x32\x96\xa4\x8d\xb4\x9b\xc3\x1d\xaf\xf4\xae\xb8\xd3\xaa\x51\x0f\x45\xa3\xef\xa5\x2d\x0e\x56\x6e\x03\x2a\x26\x4f\x5f\x83\x4e\x30\xe7\x46\xaa\xe0\xfd\xf9\x49\x21\xa9\x53\x25\xb6\x05\xaa\xba\xd5\x52\xd9\x94\xe5\x8c\x15\x05\x50\xab\x08\x9c\x73\xb6\x3e\xa8\x2a\x9a\x59\x65\x8f\xd0\x77\xc3\x3f\xc6\xff\x05\x74\xe0\xdc\x33\xca\x79\xbf\x00\xdd\xda\x8e\x72\x44\x42\xfc\x5b\x6b\xa5\x56\x39\xa0\x31\xda\x80\x63\x49\x3c\xff\xdc\x97\xee\x48\xed\x81\x07\xbf\x12\xf7\x78\x33\xf7\x67\x5d\xce\x58\x12\x92\x2e\x41\xb4\x2d\xaa\x3a\x23\x6b\x01\x0d\xda\x2f\xb7\xb7\xab\x58\xa0\xcb\x9e\xe4\xcd\x39\xe7\x14\x69\xd0\x1e\x8c\xea\xaf\x88\x8f\x2d\x45\x9e\x01\xe3\x59\x6c\xf7\xe5\x7c\x13\xc9\xa9\x04\xfc\xfc\x35\xeb\x92\xda\x0b\x4c\xcb\xe5\x53\x97\xf3\xcf\x77\xc1\x00\x00\x9c\x33\x42\x35\x08\x17\x43\x8d\x30\xab\x53\x69\x1a\x36\xe8\x7f\x7d\xd6\x1f\xd2\x6e\x88\xed\x00\xca\xa6\x51\x19\x03\xdd\x18\x44\xbf\x2b\xb4\x1b\x5d\x97\xa3\x4d\x53\x71\x31\x29\x1f\xbc\x34\x2f\x8b\x59\xd4\x4a\xd8\x4d\x79\x62\xcf\xa3\x88\x01\x21\xce\xe3\x06\x0e\xe5\x8c\xf6\xd8\x12\x9f\xa5\xe9\xd7\x71\xf0\xce\x33\x7d\xc7\xfd\x01\x3b\xfb\x09\x2b\x5d\xa3\x29\xa1\x0e\x1f\x67\xf1\xde\xf7\xc0\x29\xda\xe7\x83\xbc\x74\x79\x41\xc5\xe4\x64\x24\x48\x7f\xba\x7c\xe7\xe0\x65\xf9\xbd\x8f\x03\xf2\x5a\xe5\xec\xf7\xf9\xa2\x18\x78\x4b\x37\xc3\x7b\x48\x0e\x99\x89\x5f\x20\x87\xad\x71\x7e\x41\xdb\x11\x37\x24\xa7\x19\x0a\xcf\x52\x8f\xbb\x7d\x6c\xc3\x8b\x94\x49\x55\xe3\xf1\xa4\xf4\x4a\x18\xb1\xeb\xe0\x5d\xce\x03\x84\x9a\x7b\x10\x06\x0c\xee\xc3\x6e\x9e\x86\x93\x4f\xae\x43\x91\x72\x09\xf4\x0c\xf1\x6b\xfc\xdb\x2b\x9a\x19\xfe\x41\xd7\x8f\x39\x8f\x76\xf6\xc6\xe0\x3e\x7f\x1f\xc0\xff\x2d\x41\xc9\x2d\x31\x1a\x34\x53\x72\x1b\xc8\xb2\xc4\x4f\x42\x1a\xdc\xc7\x43\x7a\x50\x51\xd5\xde\xb3\x7f\x01\x00\x00\xff\xff\x90\x71\xe5\x3e\x7d\x05\x00\x00")

func tmplServerTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplServerTmpl,
		"tmpl/server.tmpl",
	)
}

func tmplServerTmpl() (*asset, error) {
	bytes, err := tmplServerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/server.tmpl", size: 1405, mode: os.FileMode(420), modTime: time.Unix(1581299221, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/endpoints.tmpl": tmplEndpointsTmpl,
	"tmpl/server.tmpl": tmplServerTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"endpoints.tmpl": &bintree{tmplEndpointsTmpl, map[string]*bintree{}},
		"server.tmpl": &bintree{tmplServerTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

