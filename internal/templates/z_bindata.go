// Code generated by go-bindata.
// sources:
// tmpl/endpoints.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplEndpointsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xc1\x6e\xdb\x3a\x10\x3c\x8b\x5f\xb1\x20\xf2\x00\xe9\xc1\xa6\xd0\xab\x81\x9c\x8a\x1e\x7a\x68\x11\x20\xfd\x01\x96\x5a\x4b\x84\x2a\x52\x59\x52\xae\x0b\x82\xff\x5e\x90\x92\x6c\x05\x76\x9a\x1c\x0c\x9b\xdc\xe1\xec\xcc\xec\x3a\x84\x3d\x3c\x8c\x52\xf5\xb2\xc5\xef\x72\x40\x38\x3c\x82\x78\xda\x9c\x63\x64\x19\xe3\x90\x4e\x5a\xe1\x57\xe3\x91\x8e\x52\x65\xe0\x48\xda\xf8\x23\xf0\xff\x9c\x78\x9e\xcb\xfc\xf5\xe3\x7d\x8c\x8c\x2d\xec\x90\x18\x90\x18\xd3\xc3\x68\xc9\x43\xc9\x0a\xae\xac\xf1\x78\xf6\x9c\xb1\x82\xb7\xda\x77\xd3\x4f\xa1\xec\x50\xb7\x76\xdf\x6b\x5f\xa7\x0f\x9a\x66\xb4\xda\x78\xce\x0a\x1e\xc2\x85\x1d\x62\xe4\xac\x62\xac\xae\xe1\xcb\x82\x70\x20\x84\x60\xfe\xcf\x88\x9b\x2b\xe7\x69\x52\x1e\x02\x0b\x01\x48\x9a\x16\xe1\x61\x65\xcc\x4e\xaf\xc8\x18\x59\x91\x8d\xae\x75\xb1\xd8\x5f\x21\x70\x29\xac\x37\x89\x14\x4d\x93\x5d\xc6\xac\xe5\x9b\xec\xf1\x39\xdb\xbc\x12\x13\xfa\x89\x8c\x03\x69\x6e\x75\xfd\xee\x90\x10\x50\xaa\xee\xc2\x0e\xda\x9c\x6c\x8f\x2e\xd1\xf9\x0e\x41\x59\x22\x74\xa3\x35\x8d\x36\x2d\x0c\xe8\x3b\xdb\x80\x35\xb9\x36\x92\x3d\xe9\x06\x1b\x58\x86\x23\xd8\x71\x32\xea\x9e\x8a\xd2\x41\x08\x77\x86\x18\x63\xb5\x51\x15\x58\x31\xab\xbd\xde\x85\x94\xca\x07\xa2\xfb\x77\x76\x07\x18\x64\x8f\x49\xc1\x5b\x88\xd2\x55\xbb\xdc\x6a\x0d\xb4\xc8\x99\x7e\xa4\x77\x5d\xbf\xcb\xbe\x1d\xc2\x85\xe8\xa4\xe5\x9c\xa2\x74\xee\x26\xc3\xf7\xf5\xbe\x1d\xe8\xcd\xa2\x6c\x82\x4d\xe4\xa5\xf2\x67\x58\x56\x5f\x7c\x9e\xbf\x77\x40\xf8\x32\xa1\x4b\xf3\x5f\xb8\x42\xac\xa0\xdc\x9c\x76\x80\x44\x96\x2a\x08\xcb\xa6\x2e\x2f\x7e\xa4\x95\x3f\x3c\x02\xe1\xf8\x2b\x49\x28\xb5\x69\xf0\xbc\x91\xfe\x24\x49\x0e\x0e\x3e\x55\x22\x43\xf9\xff\x1c\x4a\x65\x8d\x92\x3e\xff\x7e\xf5\xf7\xe7\x82\x57\xf3\x40\x09\x5f\x66\xd6\xdc\x44\x94\xc9\xee\xb6\x63\x8c\x55\x46\xb9\x71\x07\xb9\xbf\x13\xf7\x02\x4b\x66\xb3\xb9\x19\x9d\x43\x58\x1e\xcd\x33\x0e\x01\x4d\x13\xe3\xdf\x00\x00\x00\xff\xff\x57\x01\x55\x54\x89\x04\x00\x00")

func tmplEndpointsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplEndpointsTmpl,
		"tmpl/endpoints.tmpl",
	)
}

func tmplEndpointsTmpl() (*asset, error) {
	bytes, err := tmplEndpointsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/endpoints.tmpl", size: 1161, mode: os.FileMode(420), modTime: time.Unix(1581241654, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/endpoints.tmpl": tmplEndpointsTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"endpoints.tmpl": &bintree{tmplEndpointsTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

