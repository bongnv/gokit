// Code generated by go-bindata.
// sources:
// tmpl/endpoints.tmpl
// tmpl/handlers.tmpl
// tmpl/main.tmpl
// tmpl/server.tmpl
// tmpl/service.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplEndpointsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x8a\xdc\x3a\x10\x3c\x5b\x5f\xd1\x98\x7d\x60\xc3\x8c\xcc\xbb\x0e\xec\x29\xe4\x90\x43\xc2\x42\xf2\x03\x8a\xdc\x63\x0b\x63\xc9\xdb\x92\x27\x13\x84\xfe\x3d\x48\x96\x3d\x0e\x33\x9b\xdd\x83\x31\x52\x57\x97\xaa\xaa\xdb\xfb\x23\x3c\x4d\x42\x0e\xa2\xc3\x6f\x62\x44\x38\x3d\x03\x7f\xd9\x9d\x43\x60\x09\x63\x91\x2e\x4a\xe2\x17\xed\x90\xce\x42\x26\xe0\x44\x4a\xbb\x33\x94\xff\x59\xfe\x7d\x29\x97\x7f\x37\x1f\x43\x60\x2c\xb3\x03\xea\x76\x32\x4a\x3b\xc6\xd4\x38\x19\x72\x50\xb1\xa2\x94\x46\x3b\xbc\xba\x92\xb1\xa2\xec\x94\xeb\xe7\x9f\x5c\x9a\xb1\xe9\xcc\x71\x50\xae\x89\xdf\xda\x56\xb2\xa2\xf4\x7e\xe3\x87\x10\x4a\x56\x33\xd6\x34\xf0\x39\x23\x2c\x70\xce\x99\xfb\x3d\xe1\xee\xca\x3a\x9a\xa5\x03\xcf\xbc\x07\x12\xba\x43\x78\x5a\x19\x93\xd7\x1b\x32\x04\x56\x24\xab\x6b\x9d\xe7\x00\x56\xc8\xe6\x60\x6b\x8a\xa4\xa8\xdb\xe4\x33\x24\x2d\x5f\xc5\x80\x31\x0b\xa4\x1b\x31\xa1\x9b\x49\x5b\x10\xfa\x5e\xd7\xaf\x1e\x09\x01\x85\xec\x37\x76\x50\xfa\x62\x06\xb4\x91\xce\xf5\x08\xd2\x10\xa1\x9d\x8c\x6e\x95\xee\x60\x44\xd7\x9b\x16\x8c\x4e\xb5\x89\xcc\x45\xb5\xd8\x42\x1e\x0f\x67\xe7\x59\xcb\x47\x2a\x2a\x0b\xde\x3f\x18\x63\x08\xf5\x4e\x95\x67\xc5\xa2\xf6\x76\xe7\x63\x2a\x1f\x88\xee\xdf\xd9\x9d\x60\x14\x03\x46\x05\x6f\x21\x2a\x5b\x1f\xd2\x53\x6b\xa0\x45\xca\xf4\x23\x6f\x37\xcd\xbb\xec\xfb\x21\x6c\x44\x17\x25\x96\x14\x85\xb5\x77\x19\xbe\xaf\xf7\xed\x40\xef\x16\x65\x17\x6c\x24\xaf\xa4\xbb\x42\x5e\x7d\xfe\x69\xf9\x1f\x80\xf0\x75\x46\x1b\xe7\x9f\xb9\x7c\xa8\xa1\xda\x9d\x0e\x80\x44\x86\x6a\xf0\x79\x53\x73\xc7\x8f\xb8\xf2\xa7\xe7\x88\x6d\xf1\xba\x93\xfc\x22\x48\x8c\x16\xfe\xaf\x79\x82\xa4\x31\x11\xbe\x46\x6c\x6e\xe5\x55\x34\xb1\xe7\x09\xa1\x4e\x28\x3b\x1d\x20\xb1\x5a\xfe\x28\x86\x68\x21\x49\x5e\xd0\xc9\x5a\x6e\x5a\x26\xe7\x3d\xea\x36\x84\x3f\x01\x00\x00\xff\xff\x50\x3a\x2d\xe7\x61\x04\x00\x00")

func tmplEndpointsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplEndpointsTmpl,
		"tmpl/endpoints.tmpl",
	)
}

func tmplEndpointsTmpl() (*asset, error) {
	bytes, err := tmplEndpointsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/endpoints.tmpl", size: 1121, mode: os.FileMode(420), modTime: time.Unix(1583540106, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplHandlersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x41\x4e\xc3\x30\x10\x45\xd7\x9d\x53\x7c\x65\x81\x92\x2a\x4a\xef\x50\x36\xb0\x89\x10\x9c\xc0\x98\xa1\xb1\x70\xec\x74\x3c\x21\x8d\xa2\xdc\x1d\x95\x46\x90\x45\x41\xb0\xb1\x17\xfe\xdf\xef\xfd\xce\xd8\x37\x73\x60\x34\x26\xbc\x78\x96\x44\xe4\xda\x2e\x8a\x22\xa7\x4d\x66\x63\x50\x3e\x69\x46\xb4\xc9\xa6\x09\xd5\xc3\x12\x9e\xe7\x8c\x0a\x22\x1d\xbb\xaf\xe2\x7d\xdb\x79\x24\x95\xde\x2a\x26\x9a\x89\x5e\xfb\x60\x91\x37\xd8\xae\x02\x05\xee\xd8\xfb\x98\x5b\x3d\x61\xf9\xbb\xba\xbd\xdc\x25\x84\x8f\xd8\xae\x28\xb5\x69\xcf\xa4\xea\x91\x8f\x3d\x27\x2d\x90\x5f\x7f\x4d\x5d\x0c\x89\x4b\xb0\x48\x94\x02\x13\x6d\x84\xb5\x97\x80\xe0\x7c\x79\x3e\x7e\xb6\xd9\x8f\xfc\x3f\x97\xfd\xc8\xbf\xeb\x7c\x06\xfe\x64\xb4\xdb\xa1\xe6\x01\x56\xd8\x28\x27\x18\x04\x1e\x90\x58\xde\x9d\x65\x0c\x4e\x1b\x3c\xf7\xc9\x05\x4e\x09\x3e\x1e\x9c\xad\x2e\x1b\x6a\x1e\xf2\x02\x57\xc8\x4f\x4b\xf5\x9b\x76\xb3\xda\x3a\xcd\x34\xd3\x47\x00\x00\x00\xff\xff\x91\xab\xfd\x00\xec\x01\x00\x00")

func tmplHandlersTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplHandlersTmpl,
		"tmpl/handlers.tmpl",
	)
}

func tmplHandlersTmpl() (*asset, error) {
	bytes, err := tmplHandlersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/handlers.tmpl", size: 492, mode: os.FileMode(420), modTime: time.Unix(1583550823, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\x6b\xc3\x30\x10\x85\x67\xdd\xaf\x38\x34\x49\x60\xce\x7b\x20\x73\xb7\x36\xd0\xb1\x74\x50\xec\xab\x2c\x62\x9f\x84\x2c\x27\x83\xf1\x7f\x2f\x51\x5c\x9a\x29\x93\x78\xbc\x4f\xdf\xbd\xe4\xba\x8b\xf3\x8c\x93\x0b\x02\x10\xa6\x14\x73\x41\x03\x4a\x8f\xd1\x6b\x00\xa5\xd7\x15\xe9\xb4\x43\xdb\xd6\x06\x29\x9c\xc5\x8d\xed\xe0\xa4\x1f\x39\xcf\xfa\x05\x33\x73\xbe\x72\xd6\xa0\x7c\xbc\x84\xf2\x59\x13\x6a\x1f\xca\xb0\x9c\xa9\x8b\x53\x7b\x8e\xe2\xe5\xda\xd6\xba\x5d\x4a\xf8\xff\x62\x01\x7e\x16\xe9\xea\x2e\x63\x71\x05\x15\x53\x99\xf1\x70\xc4\xaf\xef\x27\x1b\x7d\xa4\x12\xa2\xac\xdb\xde\x1f\xd1\xa5\xc4\xd2\x9b\x7b\x6a\xf0\x61\xa3\x37\xae\x78\xe8\xf8\x81\xcf\xe6\x6f\x3d\xbd\xf3\xcd\x58\x4b\x44\x16\x40\x71\xce\xf7\x0b\xcf\xfe\xfa\x18\x50\x55\x4f\x44\x0d\x28\x0b\x00\x6a\x8c\x9e\x4e\x39\x48\x19\xc5\xe8\x5d\x8e\x73\x89\x29\x71\x8f\xb7\x50\x86\x83\x6e\x90\x73\xb6\xb0\xc1\x6f\x00\x00\x00\xff\xff\x82\x66\x30\x54\x64\x01\x00\x00")

func tmplMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMainTmpl,
		"tmpl/main.tmpl",
	)
}

func tmplMainTmpl() (*asset, error) {
	bytes, err := tmplMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/main.tmpl", size: 356, mode: os.FileMode(420), modTime: time.Unix(1583565185, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplServerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xdf\x6f\xd3\x30\x10\x7e\x8e\xff\x8a\x23\x1a\x28\x41\x9d\x23\x5e\x83\xfa\xc2\x0f\x01\x0f\x1b\x15\x9b\xc4\x03\x42\xc8\x4b\xae\xa9\x59\x6b\xa7\x8e\x3b\x36\x59\xfe\xdf\xd1\xd9\xf9\xd1\xd0\x69\x13\x91\xaa\xc6\xbe\xef\xbb\xfb\xee\xf3\xc5\xce\x9d\xc3\x59\x2b\xaa\x5b\xd1\xe0\xa5\xd8\x21\x94\x4b\xe0\xab\xa3\xb5\xf7\x2c\x60\x3a\x34\x77\xb2\xc2\x2f\xca\xa2\x59\x8b\x2a\x00\x5b\x23\x95\x5d\x43\xfa\xb2\xe3\x57\x31\x9c\xce\xc9\xe7\xde\x33\xd6\x67\x07\xca\x80\x86\x31\xb9\x6b\xb5\xb1\x90\xb1\x24\xad\xb4\xb2\x78\x6f\x53\x96\xa4\xa8\x2a\x5d\x4b\xd5\x14\xbf\x3b\xad\x68\x43\xa1\x2d\x36\xd6\xb6\x29\x63\x49\xda\x48\xbb\x39\xdc\xf0\x4a\xef\x8a\x1b\xad\x1a\x75\x57\x34\xfa\x56\xda\xe2\x60\xe5\x36\xa0\x62\xf2\xf4\x39\xe8\x04\x73\x6e\x94\x0a\xde\x9f\xee\x14\x92\x3a\x55\x62\x5b\xa0\xaa\x5b\x2d\x95\x4d\x59\xce\x58\x51\xc0\x27\xb4\x7d\xb7\x5f\x5b\x2b\xb5\xea\x80\x73\xce\xd6\x07\x55\x9d\x86\xb2\x0e\x9c\x9b\x1b\xec\xfd\x60\x56\x0e\x3f\x7e\x46\x41\x3c\xc2\xc1\xb1\x24\x6e\x7c\xec\x6b\x76\x64\xf3\x20\x80\x5f\x88\x5b\xbc\x9a\xc7\xb3\x2e\x67\x2c\xd1\x6d\x44\xfe\x93\xcf\xf9\x21\xb6\x04\xd1\xb6\xa8\xea\x8c\x56\x8b\x06\xed\xe7\xeb\xeb\xd5\xa8\x71\x9e\x32\xe7\x9c\x2f\x28\xab\x41\x7b\x30\x0a\x88\xc2\x3c\x8b\x1d\x3e\x4d\x9d\xa4\x4e\xd9\x1e\x6b\xf2\x3f\xf5\x32\x00\x00\xe7\x8c\x50\x0d\xc2\xd9\x50\x23\x8c\xea\x54\x9a\x66\x0d\xfa\xa7\xcf\xfa\x5d\xda\x0d\xa9\x1d\x40\xd9\x34\x29\x23\xd1\x8d\x24\x7a\x2e\xd0\x6e\x74\x5d\x8e\x6b\x1a\x8a\xb3\xc9\xff\x10\xa5\x71\x59\xcc\x58\x2b\x61\x37\xe5\xd1\x7a\xce\x22\x05\x84\x38\xe5\x0d\x1a\xca\x99\xec\xb1\x25\x3e\x4b\xd3\x0f\xcf\x10\x9d\x67\xfa\x86\xfb\x03\x76\xf6\x03\x56\xba\x46\x53\x42\x1d\x5e\x4e\xf8\xde\xf7\xc0\x89\xed\xf3\xc1\x5e\x3a\xbc\xe0\x62\xf2\xc8\xe1\x3b\x07\x4f\xdb\xef\x7d\x1c\x90\xe7\x2a\x67\xbf\xa0\xff\xea\xf9\xfb\xf8\xbf\x00\x03\xaf\xe9\x64\x78\x0f\xc9\x21\x33\xf1\x0d\xe4\x70\xdd\x38\xbf\x00\x34\x86\x7e\xda\xe4\x34\x43\xe1\x56\xea\x71\xd7\x0f\x6d\xb8\x90\x32\xa9\x6a\xbc\x3f\x2a\xbd\x12\x46\xec\x3a\x78\x93\xf3\x00\xa1\xe6\xee\x84\x01\x83\xfb\xf0\x5d\x1e\xd3\x29\x26\xd7\xa1\x48\xb9\x04\xba\x85\xf8\x25\xfe\xe9\x1d\xcd\x0c\x7f\xa7\xeb\x87\x9c\xc7\x75\xf6\xca\xe0\x3e\x7f\x1b\xc0\x2f\x96\xa0\xe4\x96\x14\x0d\x9e\x29\xb9\x0d\x62\x59\xe2\x27\x23\x0d\xee\xe3\x26\xdd\xa7\xa8\x6a\xef\xd9\xdf\x00\x00\x00\xff\xff\x39\xd5\x18\xb1\x7c\x05\x00\x00")

func tmplServerTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplServerTmpl,
		"tmpl/server.tmpl",
	)
}

func tmplServerTmpl() (*asset, error) {
	bytes, err := tmplServerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/server.tmpl", size: 1404, mode: os.FileMode(420), modTime: time.Unix(1583565751, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x6a\x83\x40\x10\x86\xcf\xd9\xa7\x18\x3c\x25\x12\xcc\xbd\xc7\xf4\xd2\x53\x29\x69\x1f\x20\xcb\xf2\x27\x6c\xab\xbb\x9b\xd9\x49\x51\xc4\x77\x2f\xba\x46\x25\x34\x90\x93\xfa\xf3\xcf\xe7\x37\x13\xb4\xf9\xd1\x67\x50\xdb\x52\xf1\x91\xde\xdf\x75\x05\xea\x3a\xa5\x6c\x15\x3c\x0b\x65\xc6\x3b\x41\x2d\x99\x52\xbb\x1d\x7d\x82\x7f\xad\x01\xd9\x48\x9a\xa2\xad\x42\x09\xb2\x4e\xc0\x27\x6d\x40\x27\xcf\x7d\x9c\x3a\x85\x92\x26\x60\x9e\x98\x5a\xad\x5a\xbd\xa1\x2c\xfd\xda\x48\x4d\x23\xbd\x78\x4d\xcf\x2d\x05\xca\x0f\xb8\x5c\x11\x65\x43\xeb\xfc\x80\x18\xbc\x8b\xd8\x12\x98\x3d\x6f\xd4\x6a\xdf\xe0\xff\x41\xc6\x85\xf2\x7d\x83\xc5\xf4\xf0\x75\x07\xe8\x86\x3d\xc6\x12\x05\x46\x84\x93\x7e\x1b\x4e\xd1\xa8\x7d\x2b\x44\xe1\xab\x91\xde\x79\x38\x4c\x14\xb6\xee\x4c\xc7\xef\xe8\xdd\x4b\xe6\x74\x85\xec\x38\x21\xd3\x9f\xa8\x28\x26\xc6\x98\xcc\x90\x2f\xd4\x72\x07\x19\x8e\x7b\x83\xcc\xfe\x8f\xd5\x16\x9d\xe7\xed\x16\xa7\x98\x05\x97\xe1\x73\x8e\x7f\x01\x00\x00\xff\xff\x3a\x5f\xe1\x0d\x31\x02\x00\x00")

func tmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplServiceTmpl,
		"tmpl/service.tmpl",
	)
}

func tmplServiceTmpl() (*asset, error) {
	bytes, err := tmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/service.tmpl", size: 561, mode: os.FileMode(420), modTime: time.Unix(1583550823, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/endpoints.tmpl": tmplEndpointsTmpl,
	"tmpl/handlers.tmpl": tmplHandlersTmpl,
	"tmpl/main.tmpl": tmplMainTmpl,
	"tmpl/server.tmpl": tmplServerTmpl,
	"tmpl/service.tmpl": tmplServiceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"endpoints.tmpl": &bintree{tmplEndpointsTmpl, map[string]*bintree{}},
		"handlers.tmpl": &bintree{tmplHandlersTmpl, map[string]*bintree{}},
		"main.tmpl": &bintree{tmplMainTmpl, map[string]*bintree{}},
		"server.tmpl": &bintree{tmplServerTmpl, map[string]*bintree{}},
		"service.tmpl": &bintree{tmplServiceTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

