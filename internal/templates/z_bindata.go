package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _tmpl_endpoints_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\xc1\x8e\x9b\x30\x10\x3d\xe3\xaf\x18\xa1\x5d\x09\xa4\xac\x51\xaf\x91\xf6\x54\xf5\xd0\x43\xab\x3d\xf4\x07\x5c\x33\x01\x2b\xc2\x66\xc7\x26\x4d\x65\xf9\xdf\x2b\x1b\x43\xd9\x0d\xa9\x56\x3d\x24\x08\xfc\x66\xde\x9b\xf7\xc6\xde\x3f\xc1\xc3\x28\xe4\x59\x74\xf8\x5d\x0c\x08\xc7\x67\xe0\x2f\x9b\xf7\x10\x58\xc2\x58\xa4\x8b\x92\xf8\x55\x3b\xa4\x93\x90\x09\x38\x92\xd2\xee\x04\xe5\xa3\xe5\x8f\xb6\x7c\x5b\xc7\xd3\xff\xd3\xbb\xf2\x95\x62\xe9\xcd\x32\x37\xa0\x6e\x47\xa3\xb4\x63\x4c\x0d\xa3\x21\x07\x15\x2b\x4a\x69\xb4\xc3\xab\x2b\x19\x2b\xca\x4e\xb9\x7e\xfa\xc9\xa5\x19\x9a\xce\x3c\x9d\x95\x6b\xe2\x6f\x29\x2b\x59\x51\x7a\xbf\x4a\x80\x10\x4a\x56\x33\xd6\x34\x10\xbf\x66\xb6\x2f\x19\x6c\x81\x73\xce\xdc\xef\x11\xf7\x4f\xad\xa3\x49\x3a\xf0\xcc\x7b\x20\xa1\x3b\x84\x87\x85\x27\x89\xff\x8b\x0c\x81\x15\x69\xbe\xe5\xfc\x7d\xb3\x75\xae\xb5\x28\x36\x45\xdd\x26\x6b\x42\x52\xf8\x4d\x9c\x71\x57\x07\xa1\x9b\x48\x5b\x10\x1a\x6e\xc4\xfd\xea\x91\x10\x50\xc8\x7e\xa5\x00\xa5\x2f\xe6\x8c\x36\xf6\x74\x3d\x82\x34\x44\x68\x47\xa3\x5b\xa5\x3b\x18\xd0\xf5\xa6\x05\xa3\xd3\xd9\x48\xe6\xa2\x5a\x6c\x21\x07\xc3\xd9\x69\xd2\xf2\xae\x94\xca\x46\xa7\x6e\x97\x20\x84\x7a\xdf\x42\xcf\x8a\x59\xfd\xee\xb1\x8f\xae\x7d\xc0\xda\x7f\x7b\x7b\x84\x61\x96\xfb\x66\xbb\x42\x88\x5f\xee\xd5\x54\xb6\x3e\x24\xf2\x25\x82\x22\xa5\xf0\x11\x35\x4d\xb3\xf2\xdd\x4d\x7b\x93\xd8\xda\xe8\xa2\xc4\x6c\xb9\xb0\xf6\xc6\xf0\xff\x99\xe0\x7e\x14\x37\xcb\xb6\xc9\x21\xd2\x55\xd2\x5d\x21\x5f\x2a\xfe\x79\x7e\x1e\x80\xf0\x75\x42\x1b\xd7\x27\xf7\xf2\xa1\x86\x6a\xf3\x76\x00\x24\x32\x54\x83\xcf\xdb\x9e\x2b\x7e\xc4\x1b\x74\x7c\x8e\xd8\x16\xaf\x1b\xc9\x2f\x82\xc4\x60\xe1\x53\xcd\x13\x24\x45\x49\xf8\x1a\xb1\xb9\x94\x57\x71\x88\x6d\x9f\x10\xea\x84\xb2\xe3\x01\x52\x57\xcb\xf7\x6c\x88\x23\x24\xc9\x33\x3a\x8d\x96\x8b\xe6\x2c\xbd\x47\xdd\x86\xf0\x27\x00\x00\xff\xff\xb9\xa4\x22\x92\xd9\x04\x00\x00")

func tmpl_endpoints_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_endpoints_tmpl,
		"tmpl/endpoints.tmpl",
	)
}

var _tmpl_handlers_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x41\x4e\xc3\x30\x10\x45\xd7\x9d\x53\x7c\x65\x81\x92\x2a\x4a\xef\x50\x36\xb0\x89\x10\x9c\xc0\x98\xa1\xb1\x70\xec\x74\x3c\x21\x8d\xa2\xdc\x1d\x95\x46\x90\x45\x41\xb0\xb1\x17\xfe\xdf\xef\xfd\xce\xd8\x37\x73\x60\x34\x26\xbc\x78\x96\x44\xe4\xda\x2e\x8a\x22\xa7\x4d\x66\x63\x50\x3e\x69\x46\xb4\xc9\xa6\x09\xd5\xc3\x12\x9e\xe7\x8c\x0a\x22\x1d\xbb\xaf\xe2\x7d\xdb\x79\x24\x95\xde\x2a\x26\x9a\x89\x5e\xfb\x60\x91\x37\xd8\xae\x02\x05\xee\xd8\xfb\x98\x5b\x3d\x61\xf9\xbb\xba\xbd\xdc\x25\x84\x8f\xd8\xae\x28\xb5\x69\xcf\xa4\xea\x91\x8f\x3d\x27\x2d\x90\x5f\x7f\x4d\x5d\x0c\x89\x4b\xb0\x48\x94\x02\x13\x6d\x84\xb5\x97\x80\xe0\x7c\x79\x3e\x7e\xb6\xd9\x8f\xfc\x3f\x97\xfd\xc8\xbf\xeb\x7c\x06\xfe\x64\xb4\xdb\xa1\xe6\x01\x56\xd8\x28\x27\x18\x04\x1e\x90\x58\xde\x9d\x65\x0c\x4e\x1b\x3c\xf7\xc9\x05\x4e\x09\x3e\x1e\x9c\xad\x2e\x1b\x6a\x1e\xf2\x02\x57\xc8\x4f\x4b\xf5\x9b\x76\xb3\xda\x3a\xcd\x34\xd3\x47\x00\x00\x00\xff\xff\x91\xab\xfd\x00\xec\x01\x00\x00")

func tmpl_handlers_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_handlers_tmpl,
		"tmpl/handlers.tmpl",
	)
}

var _tmpl_main_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\x6b\xc3\x30\x10\x85\x67\xdd\xaf\x38\x34\x49\x60\xce\x7b\x20\x73\xb7\x36\xd0\xb1\x74\x50\xec\xab\x2c\x62\x9f\x84\x2c\x27\x83\xf1\x7f\x2f\x51\x5c\x9a\x29\x93\x78\xbc\x4f\xdf\xbd\xe4\xba\x8b\xf3\x8c\x93\x0b\x02\x10\xa6\x14\x73\x41\x03\x4a\x8f\xd1\x6b\x00\xa5\xd7\x15\xe9\xb4\x43\xdb\xd6\x06\x29\x9c\xc5\x8d\xed\xe0\xa4\x1f\x39\xcf\xfa\x05\x33\x73\xbe\x72\xd6\xa0\x7c\xbc\x84\xf2\x59\x13\x6a\x1f\xca\xb0\x9c\xa9\x8b\x53\x7b\x8e\xe2\xe5\xda\xd6\xba\x5d\x4a\xf8\xff\x62\x01\x7e\x16\xe9\xea\x2e\x63\x71\x05\x15\x53\x99\xf1\x70\xc4\xaf\xef\x27\x1b\x7d\xa4\x12\xa2\xac\xdb\xde\x1f\xd1\xa5\xc4\xd2\x9b\x7b\x6a\xf0\x61\xa3\x37\xae\x78\xe8\xf8\x81\xcf\xe6\x6f\x3d\xbd\xf3\xcd\x58\x4b\x44\x16\x40\x71\xce\xf7\x0b\xcf\xfe\xfa\x18\x50\x55\x4f\x44\x0d\x28\x0b\x00\x6a\x8c\x9e\x4e\x39\x48\x19\xc5\xe8\x5d\x8e\x73\x89\x29\x71\x8f\xb7\x50\x86\x83\x6e\x90\x73\xb6\xb0\xc1\x6f\x00\x00\x00\xff\xff\x82\x66\x30\x54\x64\x01\x00\x00")

func tmpl_main_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_main_tmpl,
		"tmpl/main.tmpl",
	)
}

var _tmpl_server_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4f\x6f\xdb\x3e\x0c\x3d\x5b\x9f\x82\x3f\xa3\xfd\xc1\x1e\x52\x19\xbb\x7a\xc8\x65\x7f\xb0\xed\xd0\x2e\x18\x0a\xec\x30\x0c\x83\x6a\x33\x8e\xd6\x44\x72\x64\xa5\x6b\x21\xe8\xbb\x0f\x94\x65\xc7\x6e\x82\x61\x35\x90\xd8\x94\xde\x23\x1f\x29\x8a\xce\x5d\xc1\x45\x2b\xaa\x7b\xd1\xe0\x8d\xd8\x21\x94\x4b\xe0\xab\x89\xed\x3d\x0b\x98\x0e\xcd\x83\xac\xf0\xb3\xb2\x68\xd6\xa2\x0a\xc0\xd6\x48\x65\xd7\x90\x5e\x76\xfc\xb2\x4b\xe7\x3c\x1e\xfe\xaf\x9e\xd1\xc7\x10\x83\x6f\x16\x63\x03\x01\xd0\x30\x26\x77\xad\x36\x16\x32\x96\xa4\x95\x56\x16\x1f\x6d\xca\x92\x14\x55\xa5\x6b\xa9\x9a\xe2\x57\xa7\x15\x2d\x28\xb4\xc5\xc6\xda\x36\x65\x2c\x49\x1b\x69\x37\x87\x3b\x5e\xe9\x5d\x71\xa7\x55\xa3\x1e\x8a\x46\xdf\x4b\x5b\x1c\xac\xdc\x16\xbd\x63\xe2\x38\x37\x4a\x04\xef\x4f\x57\x0a\x49\xc9\x29\xb1\x2d\x50\xd5\xad\x96\xca\xa6\x2c\x67\xac\x28\xe0\x23\x5a\x82\x46\xd1\x5f\x5a\x2b\xb5\xea\x80\x73\xce\xd6\x07\x55\x9d\xdf\xce\x3a\x70\xee\x4c\xdd\xc0\xfb\x1c\xbe\xff\xe8\x65\xf1\x1e\x0c\x8e\x25\xfd\xc2\x87\x18\xb9\xa3\x2a\x0d\x32\xf8\xb5\xb8\xc7\x49\x84\x11\x94\x75\x39\x63\x89\x6e\x7b\xf8\x33\xa7\xce\x0f\x7b\x4b\x10\x6d\x8b\xaa\xce\xc8\x5a\x34\x33\xb5\x9f\x6e\x6f\x57\xa3\xe2\xb9\x84\x9c\x73\xbe\xa0\x00\x06\xed\xc1\x28\x20\x36\xf3\xac\xcf\xf9\x9f\xbd\x1c\xb3\x38\x97\xc1\xd9\x52\xbc\x30\x21\x06\x00\xe0\x9c\x11\xaa\x41\xb8\x18\xc2\x85\x36\x3b\xaa\xa0\x4e\x84\xf8\x44\xaf\xdf\xa4\xdd\x90\xf0\x01\x14\x95\x8f\x24\x37\x12\xe8\xb9\x46\xbb\xd1\x75\x39\xda\xd4\x3c\x17\xc7\x13\x0a\xbb\xd4\x56\x8b\x19\x6b\x25\xec\xa6\x9c\xd8\x73\x16\x45\x27\xc4\x29\x6f\xd0\x50\xce\x24\x8f\xe9\xf0\x99\x9b\x67\x45\x9d\x7b\xfa\x8a\xfb\x03\x76\xf6\x3d\x56\xba\x46\x53\x42\x1d\x3e\x26\xad\x19\xd9\x27\x1e\xbd\x8f\xd4\xa3\x3f\x9f\x0f\xc5\xa6\x53\x0d\x35\x4d\xce\x34\x88\x73\xf0\xf7\xc3\xf0\xbe\x6f\xa2\x97\x6b\xc9\x7e\x42\x1c\x0b\xfc\x5d\xff\x5e\x80\x81\x57\x34\x0a\x78\x84\xe4\x90\x99\xfe\x0b\xe4\x70\xeb\x9c\x5f\x00\x1a\x43\x3f\x6d\x72\xea\xb1\x30\x95\x22\xee\xf6\xa9\x0d\x53\x29\x93\xaa\xc6\xc7\x49\xe8\x95\x30\x62\xd7\xc1\xeb\x9c\x07\x08\xa5\xfb\x20\x0c\x18\xdc\x87\xbb\x3d\xa5\xd3\x9e\x5c\x87\x20\xe5\x12\x68\x4c\xf1\x1b\xfc\x1d\xab\x9e\x19\xfe\x56\xd7\x4f\x39\xef\xed\xec\x7f\x83\xfb\xfc\x4d\x00\xff\xb7\x04\x25\xb7\xa4\x68\xa8\xa2\x92\xdb\x20\x96\x25\xfe\x58\x5a\x83\xfb\x7e\x91\xe6\x29\xaa\xda\x7b\xf6\x27\x00\x00\xff\xff\xb0\x0c\x48\xb0\xbb\x05\x00\x00")

func tmpl_server_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_server_tmpl,
		"tmpl/server.tmpl",
	)
}

var _tmpl_service_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x6a\x83\x40\x10\x86\xcf\xd9\xa7\x18\x3c\x25\x12\xcc\xbd\xc7\xf4\xd2\x53\x29\x69\x1f\x20\xcb\xf2\x27\x6c\xab\xbb\x9b\xd9\x49\x51\xc4\x77\x2f\xba\x46\x25\x34\x90\x93\xfa\xf3\xcf\xe7\x37\x13\xb4\xf9\xd1\x67\x50\xdb\x52\xf1\x91\xde\xdf\x75\x05\xea\x3a\xa5\x6c\x15\x3c\x0b\x65\xc6\x3b\x41\x2d\x99\x52\xbb\x1d\x7d\x82\x7f\xad\x01\xd9\x48\x9a\xa2\xad\x42\x09\xb2\x4e\xc0\x27\x6d\x40\x27\xcf\x7d\x9c\x3a\x85\x92\x26\x60\x9e\x98\x5a\xad\x5a\xbd\xa1\x2c\xfd\xda\x48\x4d\x23\xbd\x78\x4d\xcf\x2d\x05\xca\x0f\xb8\x5c\x11\x65\x43\xeb\xfc\x80\x18\xbc\x8b\xd8\x12\x98\x3d\x6f\xd4\x6a\xdf\xe0\xff\x41\xc6\x85\xf2\x7d\x83\xc5\xf4\xf0\x75\x07\xe8\x86\x3d\xc6\x12\x05\x46\x84\x93\x7e\x1b\x4e\xd1\xa8\x7d\x2b\x44\xe1\xab\x91\xde\x79\x38\x4c\x14\xb6\xee\x4c\xc7\xef\xe8\xdd\x4b\xe6\x74\x85\xec\x38\x21\xd3\x9f\xa8\x28\x26\xc6\x98\xcc\x90\x2f\xd4\x72\x07\x19\x8e\x7b\x83\xcc\xfe\x8f\xd5\x16\x9d\xe7\xed\x16\xa7\x98\x05\x97\xe1\x73\x8e\x7f\x01\x00\x00\xff\xff\x3a\x5f\xe1\x0d\x31\x02\x00\x00")

func tmpl_service_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_service_tmpl,
		"tmpl/service.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"tmpl/endpoints.tmpl": tmpl_endpoints_tmpl,
	"tmpl/handlers.tmpl": tmpl_handlers_tmpl,
	"tmpl/main.tmpl": tmpl_main_tmpl,
	"tmpl/server.tmpl": tmpl_server_tmpl,
	"tmpl/service.tmpl": tmpl_service_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"tmpl": &_bintree_t{nil, map[string]*_bintree_t{
		"endpoints.tmpl": &_bintree_t{tmpl_endpoints_tmpl, map[string]*_bintree_t{
		}},
		"handlers.tmpl": &_bintree_t{tmpl_handlers_tmpl, map[string]*_bintree_t{
		}},
		"main.tmpl": &_bintree_t{tmpl_main_tmpl, map[string]*_bintree_t{
		}},
		"server.tmpl": &_bintree_t{tmpl_server_tmpl, map[string]*_bintree_t{
		}},
		"service.tmpl": &_bintree_t{tmpl_service_tmpl, map[string]*_bintree_t{
		}},
	}},
}}
