// Code generated by go-bindata.
// sources:
// tmpl/endpoints.tmpl
// tmpl/handlers.tmpl
// tmpl/main.tmpl
// tmpl/server.tmpl
// tmpl/service.tmpl
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplEndpointsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\xc1\x8a\xdc\x3a\x10\x3c\x5b\x5f\xd1\x98\x7d\x60\xc3\x8c\xcc\xbb\x0e\xec\x29\xe4\x90\x43\xc2\x42\xf2\x03\x8a\xdc\x63\x0b\x63\xc9\xdb\x92\x27\x13\x84\xfe\x3d\x48\x96\x3d\x0e\x33\x9b\xdd\x83\x31\x52\x57\x97\xaa\xaa\xdb\xfb\x23\x3c\x4d\x42\x0e\xa2\xc3\x6f\x62\x44\x38\x3d\x03\x7f\xd9\x9d\x43\x60\x09\x63\x91\x2e\x4a\xe2\x17\xed\x90\xce\x42\x26\xe0\x44\x4a\xbb\x33\x94\xff\x59\xfe\x7d\x29\x97\x7f\x37\x1f\x43\x60\x2c\xb3\x03\xea\x76\x32\x4a\x3b\xc6\xd4\x38\x19\x72\x50\xb1\xa2\x94\x46\x3b\xbc\xba\x92\xb1\xa2\xec\x94\xeb\xe7\x9f\x5c\x9a\xb1\xe9\xcc\x71\x50\xae\x89\xdf\xda\x56\xb2\xa2\xf4\x7e\xe3\x87\x10\x4a\x56\x33\xd6\x34\xf0\x39\x23\x2c\x70\xce\x99\xfb\x3d\xe1\xee\xca\x3a\x9a\xa5\x03\xcf\xbc\x07\x12\xba\x43\x78\x5a\x19\x93\xd7\x1b\x32\x04\x56\x24\xab\x6b\x9d\xe7\x00\x56\xc8\xe6\x60\x6b\x8a\xa4\xa8\xdb\xe4\x33\x24\x2d\x5f\xc5\x80\x31\x0b\xa4\x1b\x31\xa1\x9b\x49\x5b\x10\xfa\x5e\xd7\xaf\x1e\x09\x01\x85\xec\x37\x76\x50\xfa\x62\x06\xb4\x91\xce\xf5\x08\xd2\x10\xa1\x9d\x8c\x6e\x95\xee\x60\x44\xd7\x9b\x16\x8c\x4e\xb5\x89\xcc\x45\xb5\xd8\x42\x1e\x0f\x67\xe7\x59\xcb\x47\x2a\x2a\x0b\xde\x3f\x18\x63\x08\xf5\x4e\x95\x67\xc5\xa2\xf6\x76\xe7\x63\x2a\x1f\x88\xee\xdf\xd9\x9d\x60\x14\x03\x46\x05\x6f\x21\x2a\x5b\x1f\xd2\x53\x6b\xa0\x45\xca\xf4\x23\x6f\x37\xcd\xbb\xec\xfb\x21\x6c\x44\x17\x25\x96\x14\x85\xb5\x77\x19\xbe\xaf\xf7\xed\x40\xef\x16\x65\x17\x6c\x24\xaf\xa4\xbb\x42\x5e\x7d\xfe\x69\xf9\x1f\x80\xf0\x75\x46\x1b\xe7\x9f\xb9\x7c\xa8\xa1\xda\x9d\x0e\x80\x44\x86\x6a\xf0\x79\x53\x73\xc7\x8f\xb8\xf2\xa7\xe7\x88\x6d\xf1\xba\x93\xfc\x22\x48\x8c\x16\xfe\xaf\x79\x82\xa4\x31\x11\xbe\x46\x6c\x6e\xe5\x55\x34\xb1\xe7\x09\xa1\x4e\x28\x3b\x1d\x20\xb1\x5a\xfe\x28\x86\x68\x21\x49\x5e\xd0\xc9\x5a\x6e\x5a\x26\xe7\x3d\xea\x36\x84\x3f\x01\x00\x00\xff\xff\x50\x3a\x2d\xe7\x61\x04\x00\x00")

func tmplEndpointsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplEndpointsTmpl,
		"tmpl/endpoints.tmpl",
	)
}

func tmplEndpointsTmpl() (*asset, error) {
	bytes, err := tmplEndpointsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/endpoints.tmpl", size: 1121, mode: os.FileMode(420), modTime: time.Unix(1581299067, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplHandlersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8e\x41\x4e\xc3\x30\x10\x45\xd7\x99\x53\x7c\x65\x81\xec\x2a\xca\x21\xca\x06\x36\x15\x82\x13\x44\x66\xa0\x11\x8e\xed\x8e\x27\xd0\xc8\xf2\xdd\x51\x4b\x85\xb2\x80\x0a\x36\x33\x9b\xf7\xff\x7f\x69\x70\x6f\xc3\x2b\x63\x3f\x84\x67\xcf\x92\x89\xc6\x29\x45\x51\x18\x6a\x5a\x17\x83\xf2\x51\x5b\xa2\xa6\x2d\x05\xfd\xc3\x05\xae\xb5\x25\x4b\xa4\x4b\xfa\x0e\xde\x4f\xc9\x23\xab\xcc\x4e\x51\xa8\x12\xbd\xcc\xc1\xc1\xec\xb1\x59\x01\x16\x77\xec\x7d\x34\x4e\x8f\xb8\x74\xf7\xb7\x5f\xbf\x83\xf0\x01\x9b\xd5\xca\x6e\x98\x4e\x4b\xfd\x39\xf2\xc8\x87\x99\xb3\x5a\x98\x2b\x48\x4e\x31\x64\xee\xc0\x22\x51\x2c\x0a\x35\xc2\x3a\x4b\x40\x18\x7d\x77\x3a\xbf\x7b\x6d\x17\xfe\x9f\xd5\x76\xe1\xeb\x4e\x67\xe0\xef\x46\x3b\xfe\x30\x16\x3f\xf4\x3c\xb1\xbc\x8f\x8e\x57\xd9\x9b\x95\x79\xa9\x54\xe9\x33\x00\x00\xff\xff\xe2\x16\x6b\x11\xc4\x01\x00\x00")

func tmplHandlersTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplHandlersTmpl,
		"tmpl/handlers.tmpl",
	)
}

func tmplHandlersTmpl() (*asset, error) {
	bytes, err := tmplHandlersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/handlers.tmpl", size: 452, mode: os.FileMode(420), modTime: time.Unix(1583415405, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplMainTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xcd\x4d\xaa\x83\x30\x14\xc5\xf1\x71\xce\x2a\x2e\x19\x25\x20\x71\x2e\xbc\x2d\x3c\x84\xae\x20\xe8\xad\x86\xc6\x24\x5c\xd3\x3a\x10\xf7\x5e\xec\xc7\xb4\xa3\x33\xf9\x71\xfe\xc5\x0f\x37\x3f\x31\x2d\x3e\x24\x20\x2c\x25\x4b\x25\x03\xa5\x63\x9e\x34\xa0\xf4\xbe\x93\xeb\x3f\xe8\x38\xda\x90\x2a\x4b\xf2\xb1\x9d\x7d\x1a\x23\xcb\xaa\x7f\x98\x95\xe5\xc1\xa2\x61\x81\xeb\x3d\x0d\xaf\x88\xb1\xb4\x43\xb1\x08\x75\x7f\xf4\x06\xee\x72\x8e\x81\x52\xdf\x53\xf7\xcf\x9b\xb1\x0d\x94\x05\x54\xcc\x93\xeb\x25\xa4\x1a\x93\xd1\x27\x0d\x03\xd3\x5a\x73\x29\x3c\xd2\x16\xea\xdc\xe9\x86\x58\xc4\xe2\xc0\x33\x00\x00\xff\xff\x43\x82\xeb\x6f\xcf\x00\x00\x00")

func tmplMainTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMainTmpl,
		"tmpl/main.tmpl",
	)
}

func tmplMainTmpl() (*asset, error) {
	bytes, err := tmplMainTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/main.tmpl", size: 207, mode: os.FileMode(420), modTime: time.Unix(1582972680, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplServerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\xcb\x6e\xdb\x3a\x10\x5d\x8b\x5f\x31\x57\xc8\x2d\xa4\xc2\xa1\xd0\xad\x0a\x6f\xfa\x00\xda\x45\x52\xa3\x31\xd0\x45\x51\x14\x8c\x34\x96\x59\xdb\xa4\x4c\xd1\x6e\x02\x82\xff\x5e\x0c\x29\x59\x56\x1c\x24\xde\x58\xc3\x39\x67\x1e\x87\x33\x74\xee\x1a\xae\x5a\x51\x6d\x44\x83\xb7\x62\x87\x50\xce\x81\x2f\xce\x6c\xef\x59\xc0\x74\x68\x8e\xb2\xc2\xaf\xca\xa2\x59\x89\x2a\x00\x5b\x23\x95\x5d\x41\xfa\x7f\xc7\xef\xa2\x3b\x9d\x92\xaf\xbd\x67\xac\x8f\x0e\x14\x01\x0d\x63\x72\xd7\x6a\x63\x21\x63\x49\x5a\x69\x65\xf1\xc1\xa6\x2c\x49\x51\x55\xba\x96\xaa\x29\xfe\x74\x5a\xd1\x81\x42\x5b\xac\xad\x6d\x53\xc6\x92\xb4\x91\x76\x7d\xb8\xe7\x95\xde\x15\xf7\x5a\x35\xea\x58\x34\x7a\x23\x6d\x71\xb0\x72\x1b\x50\x31\x78\xfa\x1a\x74\x84\x39\x77\x2a\x15\xbc\xbf\x3c\x29\x24\x75\xaa\xc4\xb6\x40\x55\xb7\x5a\x2a\x9b\xb2\x9c\xb1\xa2\x00\x6a\x15\x81\x73\xce\x56\x07\x55\x45\x33\xeb\xc0\xb9\x67\x44\xf2\x7e\x06\xba\xb5\x1d\xc1\x63\x6e\xfe\xad\xb5\x52\xab\x1c\xd0\x18\x6d\xc0\xb1\x24\x9e\x7f\xee\xb3\x74\x24\xec\x90\x92\xdf\x88\x0d\xde\x4d\xfd\x59\x97\x33\x96\x84\xa0\x73\x10\x6d\x8b\xaa\xce\xc8\x9a\x41\x83\xf6\xcb\x72\xb9\x88\x09\xba\xec\x49\xdc\x9c\x73\x4e\x4c\x83\xf6\x60\x54\x7f\x1b\x3c\x56\x4f\xfc\xe0\xf6\x2c\x36\xf5\x72\xa8\xb1\xbe\x31\x3a\xfc\xfc\x35\x69\x90\x3a\x0b\x45\x96\xf3\xa7\x2e\xe7\x9f\x6f\x80\x01\x00\x38\x67\x84\x6a\x10\xae\x86\x1c\x61\x22\xc7\xd4\x34\x52\xd0\xff\xfa\xa8\x3f\xa4\x5d\x53\xb5\x03\x28\x1b\x07\xe2\x44\x74\x27\x12\xfd\x6e\xd0\xae\x75\x5d\x9e\x6c\xba\xfb\xab\x51\xf4\xe0\xa5\xa9\x98\x4d\x58\x0b\x61\xd7\xe5\x99\x3d\x65\x51\x05\x84\xb8\xe4\x0d\x35\x94\x93\xb2\x4f\x2d\xf1\x49\x98\x7e\xe9\x06\xef\x34\xd2\x77\xdc\x1f\xb0\xb3\x9f\xb0\xd2\x35\x9a\x12\xea\xf0\x71\xc1\xf7\xbe\x07\x8e\x6c\x9f\x0f\xf2\xd2\xe5\x05\x15\x93\xb3\x69\x20\xfd\xe9\xf2\x9d\x83\x97\xe5\xf7\x3e\x0e\xc8\x6b\x99\xb3\xdf\xd0\x2f\x37\xff\x18\xff\x67\x60\xe0\x2d\xdd\x0c\xef\x21\x39\x64\x26\x7e\x81\x1c\x16\xc6\xf9\x19\x2d\x46\x5c\x8e\x9c\x66\x28\x3c\x3e\x3d\x6e\xf9\xd8\x86\x77\x27\x93\xaa\xc6\x87\xb3\xd4\x0b\x61\xc4\xae\x83\x77\x39\x0f\x10\x6a\xee\x28\x0c\x18\xdc\x87\xb5\x3c\xa7\x93\x4f\xae\x42\x92\x72\x0e\xf4\xd8\xf0\x5b\xfc\xdb\x2b\x9a\x19\xfe\x41\xd7\x8f\x39\x8f\x76\xf6\xc6\xe0\x3e\x7f\x1f\xc0\xff\xcd\x41\xc9\x2d\x55\x34\x68\xa6\xe4\x36\x14\xcb\x12\x3f\x0a\x69\x70\x1f\x0f\xe9\xd9\x44\x55\x7b\xcf\xfe\x05\x00\x00\xff\xff\x72\x9d\x4a\x88\x63\x05\x00\x00")

func tmplServerTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplServerTmpl,
		"tmpl/server.tmpl",
	)
}

func tmplServerTmpl() (*asset, error) {
	bytes, err := tmplServerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/server.tmpl", size: 1379, mode: os.FileMode(420), modTime: time.Unix(1581984921, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplServiceTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x90\xc1\x6a\xf3\x30\x10\x84\xcf\xd1\x53\x2c\x3e\x25\x21\x38\xf7\xff\x98\xff\xd2\x53\x29\x6d\x1f\x20\x42\x4c\x82\x5a\x5b\x52\x56\x9b\x62\x63\xfc\xee\xc5\x92\x53\xdb\xa1\x85\x42\x4f\xd2\xae\x46\xdf\xee\x4c\xd0\xe6\x5d\x9f\x41\x5d\x47\xe5\x53\xbe\x3f\xea\x1a\xd4\xf7\x4a\xd9\x3a\x78\x16\x2a\x8c\x77\x82\x46\x0a\xa5\xf6\x7b\x7a\x01\x7f\x58\x03\xb2\x91\x34\x45\x5b\x87\x0a\x64\x9d\x80\x4f\xda\x80\x4e\x9e\x87\x76\xd6\x94\x4a\xda\x80\xe9\xc7\x97\xaa\x53\xab\x07\x54\x95\x5f\x1b\x69\x68\xa4\x97\xff\xf3\xb9\xa3\x40\xdb\xf4\xfa\x8c\xcb\x15\x51\x36\xb4\xbe\xd5\x31\x78\x17\xb1\x23\x30\x7b\xde\xa8\xd5\xa1\xc5\xf7\x08\xc6\x85\xb6\x87\x16\x33\x44\xaa\xee\x00\x7d\x72\x34\x1f\x46\x81\x11\xe1\x64\x30\xc7\xb9\x35\xba\x58\xa8\xa2\xf0\xd5\xc8\xe0\x23\x85\x15\x85\xad\x3b\xd3\xf1\x2d\x7a\xf7\xaf\x70\xba\x46\x71\x5c\xc2\xf3\x60\x2a\xcb\x25\x6d\x6c\x4f\xb8\x57\x34\x72\x87\x4b\xd1\xdf\x70\x93\xa7\x9f\x37\x9d\x69\xfe\xbc\xe7\x2c\xb5\x5f\x6e\xf9\x19\x00\x00\xff\xff\x97\x96\xd3\xa8\x51\x02\x00\x00")

func tmplServiceTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplServiceTmpl,
		"tmpl/service.tmpl",
	)
}

func tmplServiceTmpl() (*asset, error) {
	bytes, err := tmplServiceTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/service.tmpl", size: 593, mode: os.FileMode(420), modTime: time.Unix(1583415172, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/endpoints.tmpl": tmplEndpointsTmpl,
	"tmpl/handlers.tmpl": tmplHandlersTmpl,
	"tmpl/main.tmpl": tmplMainTmpl,
	"tmpl/server.tmpl": tmplServerTmpl,
	"tmpl/service.tmpl": tmplServiceTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"endpoints.tmpl": &bintree{tmplEndpointsTmpl, map[string]*bintree{}},
		"handlers.tmpl": &bintree{tmplHandlersTmpl, map[string]*bintree{}},
		"main.tmpl": &bintree{tmplMainTmpl, map[string]*bintree{}},
		"server.tmpl": &bintree{tmplServerTmpl, map[string]*bintree{}},
		"service.tmpl": &bintree{tmplServiceTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

