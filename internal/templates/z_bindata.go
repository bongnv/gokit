package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _tmpl_endpoints_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\xc1\x6e\xdb\x3a\x10\x3c\x8b\x5f\xb1\x10\x12\x40\x02\x6c\x1a\xef\x6a\x20\xa7\x87\x1c\x0a\x14\x45\x0e\xfd\x01\x96\x5a\x4b\x84\x21\x52\x59\x52\x8e\x0b\x82\xff\x5e\x90\xa2\x14\x3a\x4d\xd3\xf4\x60\x0b\xe2\xce\xcc\xce\xce\x8a\xde\xef\xe1\x6e\x12\xf2\x2c\x7a\xfc\x26\x46\x84\xe3\x03\xf0\xa7\xe2\x3d\x04\x96\x30\x16\xe9\xa2\x24\x7e\xd1\x0e\xe9\x24\x64\x02\x4e\xa4\xb4\x3b\x41\x7d\x6f\xf9\xbd\xad\x6f\x79\x3c\xfd\xef\xdf\xd0\xb7\x16\xab\x36\xcb\xbd\xc1\x7b\x70\xe6\xab\x79\x41\xba\x05\x47\x8c\x1a\x27\x43\x0e\x1a\x56\xd5\xd2\x68\x87\x57\x57\x33\x56\xd5\xbd\x72\xc3\xfc\x83\x4b\x33\x1e\x7a\xb3\x3f\x2b\x77\x88\x3f\xd4\xdd\x64\x94\x76\x35\xab\x6a\xef\x37\x53\x10\x42\xcd\x5a\xc6\x0e\x07\x58\x11\x16\x38\xe7\xcc\xfd\x9c\xb0\x38\xb2\x8e\x66\xe9\xc0\x33\xef\x81\x84\xee\x11\xee\xd6\x62\x32\xfe\xb8\x21\x43\x60\x55\x9a\x6d\xad\xaf\x43\xad\x90\x4d\x75\x23\x45\x51\xd4\x5d\x8a\x25\x24\x2f\xa3\x38\xe3\xab\x24\xa1\x9b\x49\x5b\x10\x1a\x1e\xdf\x3a\x7a\x19\x90\x10\x50\xc8\x61\xd3\x05\xa5\x2f\xe6\x8c\x36\x0a\xb9\x01\x41\x1a\x22\xb4\x93\xd1\x9d\xd2\x3d\x8c\xe8\x06\xd3\x81\xd1\xa9\x36\x91\xb9\xa8\x0e\x3b\xc8\xe1\x72\x76\x9a\xb5\xbc\xed\xdf\xd8\xb8\x86\xdf\x57\x1d\x42\x5b\x24\xe4\x59\xb5\xf8\x7c\x3d\xf3\x31\x89\x4f\xc4\xf5\x71\x5e\xc7\xe4\xa6\x70\x90\xeb\xf1\xe4\x4f\x9c\xc6\xb6\xbb\xd4\x7c\x8d\xb5\x4a\xc9\x7e\xc6\x4d\x4e\xff\x23\xf5\x72\x21\x9b\xd0\x45\x89\x25\x51\x61\xed\xbb\x79\xfe\xeb\x04\x7f\x0f\x7d\x33\x5e\x84\x1f\xdb\x35\xd2\x5d\x21\x5f\x09\xfe\xff\xf2\xdc\x01\xe1\xf3\x8c\x36\x7e\x1d\x59\xcb\x87\x16\x9a\xe2\x6d\x07\x48\x64\xa8\x05\x9f\xbf\xe0\xcc\xf8\x1e\xaf\xc2\xf1\x21\x62\x3b\xbc\x16\x96\x9f\x04\x89\xd1\xc2\x7f\x2d\x4f\x90\xb4\x4a\xc2\xe7\x88\xcd\x54\xde\xc4\x21\x4a\x9d\x10\xda\x84\xb2\xd3\x0e\x92\xaa\xe5\xef\xc5\x10\x47\x48\x96\x17\x74\x1a\x2d\x93\x96\x5d\x7a\x8f\xba\x0b\xe1\x57\x00\x00\x00\xff\xff\x56\xe4\x70\x1c\xa9\x04\x00\x00")

func tmpl_endpoints_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_endpoints_tmpl,
		"tmpl/endpoints.tmpl",
	)
}

var _tmpl_handlers_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x41\x4e\xc3\x30\x10\x45\xd7\x9d\x53\x7c\x65\x81\x92\x2a\x4a\xef\x50\x36\xb0\x89\x10\x9c\xc0\x98\xa1\xb1\x70\xec\x74\x3c\x21\x8d\xa2\xdc\x1d\x95\x46\x90\x45\x41\xb0\xb1\x17\xfe\xdf\xef\xfd\xce\xd8\x37\x73\x60\x34\x26\xbc\x78\x96\x44\xe4\xda\x2e\x8a\x22\xa7\x4d\x66\x63\x50\x3e\x69\x46\xb4\xc9\xa6\x09\xd5\xc3\x12\x9e\xe7\x8c\x0a\x22\x1d\xbb\xaf\xe2\x7d\xdb\x79\x24\x95\xde\x2a\x26\x9a\x89\x5e\xfb\x60\x91\x37\xd8\xae\x02\x05\xee\xd8\xfb\x98\x5b\x3d\x61\xf9\xbb\xba\xbd\xdc\x25\x84\x8f\xd8\xae\x28\xb5\x69\xcf\xa4\xea\x91\x8f\x3d\x27\x2d\x90\x5f\x7f\x4d\x5d\x0c\x89\x4b\xb0\x48\x94\x02\x13\x6d\x84\xb5\x97\x80\xe0\x7c\x79\x3e\x7e\xb6\xd9\x8f\xfc\x3f\x97\xfd\xc8\xbf\xeb\x7c\x06\xfe\x64\xb4\xdb\xa1\xe6\x01\x56\xd8\x28\x27\x18\x04\x1e\x90\x58\xde\x9d\x65\x0c\x4e\x1b\x3c\xf7\xc9\x05\x4e\x09\x3e\x1e\x9c\xad\x2e\x1b\x6a\x1e\xf2\x02\x57\xc8\x4f\x4b\xf5\x9b\x76\xb3\xda\x3a\xcd\x34\xd3\x47\x00\x00\x00\xff\xff\x91\xab\xfd\x00\xec\x01\x00\x00")

func tmpl_handlers_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_handlers_tmpl,
		"tmpl/handlers.tmpl",
	)
}

var _tmpl_main_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x8a\xc3\x30\x0c\x86\x67\xeb\x29\x84\x27\x1b\x82\xb2\x17\x3a\xdf\x76\x57\xe8\x78\xdc\xe0\x26\x3a\xc7\x34\xb1\x8d\xe2\xa4\x43\xc8\xbb\x1f\x4d\x72\xd0\xa9\x93\x10\xff\xaf\x4f\x5f\x76\xcd\xdd\x79\xc6\xc1\x85\x08\x10\x86\x9c\xa4\xa0\x01\xa5\xfb\xe4\x35\x80\xd2\xcb\x82\x74\x39\x4a\xeb\x5a\x87\x58\x58\xa2\xeb\xeb\xce\xc5\xb6\x67\x19\xf5\x9b\xce\xc8\x32\x87\x86\x35\x28\x9f\xee\xa1\x5c\x59\x66\x16\xd4\x3e\x94\x6e\xba\x51\x93\x86\xfa\x96\xa2\x8f\x73\xbd\xc5\xf5\x54\xc2\x7e\xc3\xa2\xc1\x02\xfc\x4e\xb1\xd9\xc4\x8c\xc5\x05\x54\xca\x65\xc4\xd3\x19\xbf\x7f\x5e\x68\xf4\x95\x4b\x48\x71\x59\x8f\xfc\x8c\x2e\x67\x8e\xad\x79\x6e\x15\x1e\x06\xf4\xc1\x65\x2f\x8e\xe6\x5f\x9c\x3e\xf9\x61\xac\x25\x22\x0b\xa0\x58\xe4\xc9\x7e\x25\x6f\xc3\x80\xda\xc0\x44\x54\x81\xb2\x00\xa0\xfa\xe4\xe9\x22\x21\x96\x3e\x1a\x7d\xdd\x1f\xe0\x58\x52\xce\xdc\xe2\x23\x94\xee\xa4\x2b\x64\x11\x0b\x2b\xfc\x05\x00\x00\xff\xff\xb8\x92\x81\x77\x5f\x01\x00\x00")

func tmpl_main_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_main_tmpl,
		"tmpl/main.tmpl",
	)
}

var _tmpl_server_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xdf\x6b\xdb\x30\x10\x7e\xb6\xfe\x8a\x9b\x69\x87\x3d\x52\x99\xbd\x7a\xe4\x65\x3f\xd8\x06\x5b\x17\x46\x61\x0f\x63\x0c\xd5\xbe\x38\x5a\x13\xc9\x91\x95\xfe\x40\xe8\x7f\x1f\x27\xcb\x8e\xdd\x94\x42\x0d\x89\xad\xbb\xef\xbb\xfb\xee\x74\x92\x73\x17\x70\xd6\x8a\xea\x46\x34\x78\x29\x76\x08\xe5\x12\xf8\x6a\xb2\xf6\x9e\x05\x4c\x87\xe6\x56\x56\xf8\x55\x59\x34\x6b\x51\x05\x60\x6b\xa4\xb2\x6b\x48\xcf\x3b\x7e\xde\xa5\x73\x1e\x0f\xff\x17\x8f\xe8\x63\x8a\x21\x36\x8b\xb9\xc1\x39\xb0\xfa\x9b\xbe\x43\x33\x07\x13\x46\xee\x5a\x6d\x2c\x64\x2c\x49\x2b\xad\x2c\xde\xdb\x94\x25\x29\xaa\x4a\xd7\x52\x35\xc5\xbf\x4e\x2b\x32\x28\xb4\xc5\xc6\xda\x36\x65\x2c\x49\x1b\x69\x37\x87\x6b\x5e\xe9\x5d\x71\xad\x55\xa3\x6e\x8b\x46\xdf\x48\x5b\x1c\xac\xdc\x16\x94\x00\x0d\x71\x9c\x1b\x65\x83\xf7\xa7\x96\x42\x52\xc1\x4a\x6c\x0b\x54\x75\xab\xa5\xb2\x29\xcb\x19\x2b\x0a\xf8\x8c\xf6\x47\x6b\xa5\x56\x1d\x70\xce\xd9\xfa\xa0\xaa\x89\x2d\xeb\xa8\xa2\xd3\xae\x81\xf7\x39\xfc\xfe\xd3\x0b\xe0\x3d\x18\x1c\x4b\x7a\xc3\xa7\x98\xa3\xa3\x1e\xed\xc4\x0d\x8e\x86\xac\xcb\x19\x4b\x74\xdb\xbb\x1e\x05\x70\x7e\xf0\x2d\x41\xb4\x2d\xaa\x3a\xa3\xd5\xa2\x41\xfb\xe5\xea\x6a\x35\x4a\x9a\xe7\xc8\x39\xe7\x0b\x8a\x6a\xd0\x1e\x8c\x02\xa2\x30\xcf\xfa\x4a\x9e\xa7\x02\x8e\x41\x9e\x2a\xe6\x85\x32\x19\x00\x80\x73\x46\xa8\x06\xe1\x6c\x08\x1d\xc6\xe4\x98\x91\x26\x09\xe2\x13\xa3\xfe\x92\x76\x43\x22\x07\x50\x54\x39\x92\xdc\x48\xa0\xe7\x3b\xda\x8d\xae\xcb\x71\x4d\x1b\x3d\x26\xe3\xbd\x97\x46\x60\x31\x63\xad\x84\xdd\x94\x93\xf5\x9c\x45\xd9\x09\x71\xca\x1b\x34\x94\x33\xc9\x63\x39\x7c\x16\x26\x0e\xfa\xe0\x9d\x47\xfa\x89\xfb\x03\x76\xf6\x23\x56\xba\x46\x53\x42\x1d\x3e\x26\xc3\x15\xd9\x27\x11\xbd\x8f\xd4\x63\x3c\x9f\x0f\xcd\xa6\x1d\x0c\x3d\x4d\x9e\x98\x00\xe7\xe0\xf9\xcd\xf0\xbe\x9f\x92\x97\x6b\xc9\xfe\x42\x3c\xc2\xfc\x43\xff\x5e\x80\x81\x37\x74\x6c\x79\x84\xe4\x90\x99\xfe\x0b\xe4\x70\x6e\x9c\x5f\x00\x1a\x43\x3f\x6d\x72\x9a\xb1\x70\xab\x44\xdc\xd5\x43\x1b\x6e\x95\x4c\xaa\x1a\xef\x27\xa9\x57\xc2\x88\x5d\x07\x6f\x73\x1e\x20\x54\xee\xad\x30\x60\x70\x1f\x4e\xe7\x94\x4e\x3e\xb9\x0e\x49\xca\x25\xd0\x95\xc2\x2f\xf1\x2e\x76\x3d\x33\xfc\xbd\xae\x1f\x72\xde\xaf\xb3\xd7\x06\xf7\xf9\xbb\x00\x7e\xb5\x04\x25\xb7\xa4\x68\xe8\xa2\x92\xdb\x20\x96\x25\xfe\xd8\x5a\x83\xfb\xde\x48\xf7\x21\xaa\xda\x7b\xf6\x3f\x00\x00\xff\xff\xdf\x1a\xa8\xbe\x7b\x05\x00\x00")

func tmpl_server_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_server_tmpl,
		"tmpl/server.tmpl",
	)
}

var _tmpl_service_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x6a\x83\x40\x10\x86\xcf\xd9\xa7\x18\x3c\x25\x12\xcc\xbd\xc7\xf4\xd2\x53\x29\x69\x1f\x20\xcb\xf2\x27\x6c\xab\xbb\x9b\xd9\x49\x51\xc4\x77\x2f\xba\x46\x25\x34\x90\x93\xfa\xf3\xcf\xe7\x37\x13\xb4\xf9\xd1\x67\x50\xdb\x52\xf1\x91\xde\xdf\x75\x05\xea\x3a\xa5\x6c\x15\x3c\x0b\x65\xc6\x3b\x41\x2d\x99\x52\xbb\x1d\x7d\x82\x7f\xad\x01\xd9\x48\x9a\xa2\xad\x42\x09\xb2\x4e\xc0\x27\x6d\x40\x27\xcf\x7d\x9c\x3a\x85\x92\x26\x60\x9e\x98\x5a\xad\x5a\xbd\xa1\x2c\xfd\xda\x48\x4d\x23\xbd\x78\x4d\xcf\x2d\x05\xca\x0f\xb8\x5c\x11\x65\x43\xeb\xfc\x80\x18\xbc\x8b\xd8\x12\x98\x3d\x6f\xd4\x6a\xdf\xe0\xff\x41\xc6\x85\xf2\x7d\x83\xc5\xf4\xf0\x75\x07\xe8\x86\x3d\xc6\x12\x05\x46\x84\x93\x7e\x1b\x4e\xd1\xa8\x7d\x2b\x44\xe1\xab\x91\xde\x79\x38\x4c\x14\xb6\xee\x4c\xc7\xef\xe8\xdd\x4b\xe6\x74\x85\xec\x38\x21\xd3\x9f\xa8\x28\x26\xc6\x98\xcc\x90\x2f\xd4\x72\x07\x19\x8e\x7b\x83\xcc\xfe\x8f\xd5\x16\x9d\xe7\xed\x16\xa7\x98\x05\x97\xe1\x73\x8e\x7f\x01\x00\x00\xff\xff\x3a\x5f\xe1\x0d\x31\x02\x00\x00")

func tmpl_service_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_service_tmpl,
		"tmpl/service.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"tmpl/endpoints.tmpl": tmpl_endpoints_tmpl,
	"tmpl/handlers.tmpl": tmpl_handlers_tmpl,
	"tmpl/main.tmpl": tmpl_main_tmpl,
	"tmpl/server.tmpl": tmpl_server_tmpl,
	"tmpl/service.tmpl": tmpl_service_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"tmpl": &_bintree_t{nil, map[string]*_bintree_t{
		"endpoints.tmpl": &_bintree_t{tmpl_endpoints_tmpl, map[string]*_bintree_t{
		}},
		"handlers.tmpl": &_bintree_t{tmpl_handlers_tmpl, map[string]*_bintree_t{
		}},
		"main.tmpl": &_bintree_t{tmpl_main_tmpl, map[string]*_bintree_t{
		}},
		"server.tmpl": &_bintree_t{tmpl_server_tmpl, map[string]*_bintree_t{
		}},
		"service.tmpl": &_bintree_t{tmpl_service_tmpl, map[string]*_bintree_t{
		}},
	}},
}}
