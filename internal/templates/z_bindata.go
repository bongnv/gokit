package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _tmpl_crud_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\x5f\x6f\x9b\x30\x14\xc5\x9f\xeb\x4f\x71\xe5\xa7\xb6\xaa\xe0\x65\xda\x43\x5e\x43\x14\x55\x42\x6b\xd4\x36\x4f\xd3\xa4\x58\xe4\x92\x7a\x05\x4c\xed\x9b\xad\x13\xe3\xbb\x4f\xfc\x09\x90\xd4\x46\x64\xcb\x9e\xe2\x70\x0e\xf7\xfe\xb8\xf6\x71\x2e\xa2\x57\xb1\x43\x28\x0a\xf0\x56\xcd\xfa\x8b\x48\x11\xca\x92\x31\x99\xe6\x4a\x13\xf0\x48\x65\x84\xef\xc4\x19\xf3\xfd\xda\xd8\x3a\x9e\x50\xff\x90\x11\x82\x34\x20\x60\xfe\xb8\x0e\x40\x66\x84\x3a\x16\x11\x42\xac\x34\x88\xa1\x19\x4c\xe3\xf6\x18\xfd\xca\xd1\x5a\xa6\x7b\xb9\x60\x00\x00\xbe\xbf\x53\xaf\x92\x66\x90\x22\xbd\xa8\xed\x8c\x2f\x17\xcf\x1c\x72\x41\x2f\x33\xee\x77\xef\xff\x06\x52\xa1\xfa\x89\xba\x5e\xad\x92\xbd\x16\x09\x94\xa5\x5f\xdc\x07\x25\x67\x57\x4b\xa4\xeb\x88\xde\xa1\xfd\x06\x6f\xde\xfc\xde\x81\xc6\x37\xb8\x5d\x22\x0d\x40\x1e\xf1\x6d\x8f\x86\x6e\xe0\xfa\x83\x60\x72\x95\x19\xbc\x03\xd4\x5a\xe9\x1b\xf6\xef\x7c\x9c\x5d\x85\xd2\x8c\xb1\x55\xb2\x1d\xee\x83\x32\x89\x6e\xf5\xf0\x74\x0e\x5e\x55\x63\xae\x51\x10\x8e\x30\x36\x06\x3b\xa5\x45\x9b\xc6\xb9\x3e\x7b\x97\xab\x3a\xeb\x7c\x3b\xce\xda\x18\xec\xac\x16\x6d\x12\x6b\xb0\x08\x17\xcf\x8b\xbf\xc1\x0d\x30\xc1\x51\xdc\xc6\x60\xc3\xad\x89\x58\x59\xa7\xd1\x7a\x80\xc1\xf3\xda\x94\xd9\x65\x43\x7a\x1f\x51\x9b\xb2\xfb\xa0\xfa\x2f\xb3\x1d\x6c\xbe\x1b\x95\xcd\xb8\xdc\xf2\x8d\xa3\x7a\x33\x13\x77\xf9\x56\x3f\xaa\x3f\xbc\x02\x86\xeb\xb6\x5b\x51\x74\xa3\x3a\x48\x5d\x7b\x7b\x02\xfa\xf6\x0e\xfd\xa8\xfd\x43\x1c\x1b\xa4\xea\x6e\xf9\xfc\xe9\xd0\x53\xd5\xcf\xf8\xa6\x36\x84\x32\x95\x04\xc7\x86\xa4\x7a\xe6\xc6\x38\x1d\x83\xcb\x70\x3a\x87\xee\x24\x74\x43\xf8\xfa\xed\xd6\x3e\x93\xf1\x70\x1e\xc8\x5c\xf1\xeb\xd1\x9c\x8e\x4b\xed\x91\x33\xe5\xa3\x0c\x17\x3e\x28\xae\x68\xf7\x0c\x4e\xc7\x7f\x44\x38\x9d\x83\xdb\x72\x29\x08\xd7\x9d\xd1\x33\x38\x1d\xd3\xee\x84\x3f\x01\x00\x00\xff\xff\xfa\xc3\x22\x5d\x2e\x08\x00\x00")

func tmpl_crud_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_crud_tmpl,
		"tmpl/crud.tmpl",
	)
}

var _tmpl_endpoints_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xdf\x6a\xe3\x3c\x10\xc5\xaf\xa5\xa7\x18\x4c\x0b\x36\x34\x0a\xbd\x0d\xe4\xea\xa3\x17\x1f\x2c\x4b\xd9\xdd\x17\xd0\xda\x93\x44\x24\x96\x9c\x91\x9c\x66\x11\x7a\xf7\x45\xf2\x9f\x28\x4d\xb6\xed\x45\x08\x96\xce\x9c\x39\xfa\x8d\xe4\xfd\x02\x1e\x3a\x59\xef\xe5\x16\xbf\xcb\x16\x61\xb5\x06\xf1\x9a\x7d\x2f\x42\xe0\x49\x64\x91\x4e\xaa\xc6\xff\xb5\x43\xda\xc8\x3a\x29\x3b\x52\xda\x6d\xa0\x78\xb4\xe2\xd1\x16\xd7\x85\xe2\x6e\xf9\xdc\x63\xde\xe5\x63\x77\xf0\x1e\x9c\xf9\x66\xde\x90\xae\xd5\x51\xa3\xda\xce\x90\x83\x92\xb3\xa2\x36\xda\xe1\xd9\x15\x9c\xb3\x62\xab\xdc\xae\xff\x2d\x6a\xd3\x2e\xb7\x66\xb1\x57\x6e\x19\x7f\xa8\x9b\xce\x28\xed\x0a\xce\x0a\xef\xe7\x54\x10\x42\xc1\x2b\xce\x97\x4b\x98\x14\x16\x84\x10\xdc\xfd\xe9\x30\x5b\xb2\x8e\xfa\xda\x81\xe7\xde\x03\x49\xbd\x45\x78\x98\x36\x53\xf2\x97\x59\x19\x02\x67\xe9\x70\xd3\xbe\x18\x03\x4f\x92\xd9\x75\x2e\x8a\xa6\xa8\x9b\x74\xf2\x90\xb2\xb4\x72\x8f\x17\x4b\x42\xd7\x93\xb6\x20\x35\xbc\xbc\x4f\xf4\xb6\x43\x42\x40\x59\xef\x66\x5f\x50\xfa\x64\xf6\x68\xa3\x91\xdb\x21\xd4\x86\x08\x6d\x67\x74\xa3\xf4\x16\x5a\x74\x3b\xd3\x80\xd1\x69\xaf\x23\x73\x52\x0d\x36\x30\xc2\x15\x7c\xd3\xeb\xfa\xba\x7f\x69\xe3\x18\x6e\x67\x1d\x42\x95\x11\xf2\x9c\x0d\x39\x2f\x6b\x3e\x92\xf8\x02\xae\x8f\x79\xad\x52\x9a\x98\xe0\x5f\x8a\xd2\x56\x4f\xa9\xd5\x04\x91\x25\x8e\x5f\xe9\xfd\x8e\x75\x8e\x7a\x2e\x3a\x29\x39\xb0\x92\xd6\xde\x25\xf5\x71\xb6\xcf\xe1\xcd\x91\x32\x88\xd1\xbc\xac\xdd\x19\xc6\xab\x2d\xfe\x1b\xfe\x9f\x80\xf0\xd8\xa3\x8d\x53\x1e\xbd\x7c\xa8\xa0\xcc\xbe\x9e\x00\x89\x0c\x55\xd1\x8d\x9d\x24\xc5\x17\xc2\x58\xbc\x02\x79\x4d\x5c\x43\xa2\x41\xcb\x19\xab\xd2\x1c\xe0\xe1\x80\x1b\xf7\x53\x35\xe9\x41\x16\xb1\x28\xd9\x15\x03\xd7\x34\x29\xb5\x01\x3c\x42\x79\x40\x9d\x1d\xfb\x07\xda\xfe\xe0\x6c\x05\xcf\xc3\x48\x87\x99\xce\x66\x6b\x28\xae\x5c\xd2\xa8\xe2\x23\x66\xde\xdf\xf5\x7b\x95\x24\xdb\x68\x37\x15\x5c\xbc\x42\x80\x35\x58\x71\x8f\x7a\x24\x56\x0d\x57\xe1\x60\x31\xbb\x5c\x23\xb4\x5f\xf1\x55\xaf\xd6\x11\x57\x83\xe7\x9b\x76\xf0\x5c\x89\x24\x49\x85\x84\xc7\xa8\x1d\x4b\x45\x19\x1b\xe6\x3e\x21\xdc\x30\xfb\x24\x5a\x1a\x5e\xc5\xb3\xf3\xb3\x69\xde\x33\xe9\xe1\xf2\x7a\x8f\xba\x09\xe1\x6f\x00\x00\x00\xff\xff\xd0\xc2\x71\xf6\x8a\x05\x00\x00")

func tmpl_endpoints_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_endpoints_tmpl,
		"tmpl/endpoints.tmpl",
	)
}

var _tmpl_handlers_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x41\x4e\xc3\x30\x10\x45\xd7\x9d\x53\x7c\x65\x81\x92\x2a\x4a\xef\x50\x36\xb0\x89\x10\x9c\xc0\x98\xa1\xb1\x70\xec\x74\x3c\x21\x8d\xa2\xdc\x1d\x95\x46\x90\x45\x41\xb0\xb1\x17\xfe\xdf\xef\xfd\xce\xd8\x37\x73\x60\x34\x26\xbc\x78\x96\x44\xe4\xda\x2e\x8a\x22\xa7\x4d\x66\x63\x50\x3e\x69\x46\xb4\xc9\xa6\x09\xd5\xc3\x12\x9e\xe7\x8c\x0a\x22\x1d\xbb\xaf\xe2\x7d\xdb\x79\x24\x95\xde\x2a\x26\x9a\x89\x5e\xfb\x60\x91\x37\xd8\xae\x02\x05\xee\xd8\xfb\x98\x5b\x3d\x61\xf9\xbb\xba\xbd\xdc\x25\x84\x8f\xd8\xae\x28\xb5\x69\xcf\xa4\xea\x91\x8f\x3d\x27\x2d\x90\x5f\x7f\x4d\x5d\x0c\x89\x4b\xb0\x48\x94\x02\x13\x6d\x84\xb5\x97\x80\xe0\x7c\x79\x3e\x7e\xb6\xd9\x8f\xfc\x3f\x97\xfd\xc8\xbf\xeb\x7c\x06\xfe\x64\xb4\xdb\xa1\xe6\x01\x56\xd8\x28\x27\x18\x04\x1e\x90\x58\xde\x9d\x65\x0c\x4e\x1b\x3c\xf7\xc9\x05\x4e\x09\x3e\x1e\x9c\xad\x2e\x1b\x6a\x1e\xf2\x02\x57\xc8\x4f\x4b\xf5\x9b\x76\xb3\xda\x3a\xcd\x34\xd3\x47\x00\x00\x00\xff\xff\x91\xab\xfd\x00\xec\x01\x00\x00")

func tmpl_handlers_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_handlers_tmpl,
		"tmpl/handlers.tmpl",
	)
}

var _tmpl_main_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x8a\xc3\x30\x0c\x86\x67\xeb\x29\x84\x27\x1b\x82\xb2\x17\x3a\xdf\x76\x57\xe8\x78\xdc\xe0\x26\x3a\xc7\x34\xb1\x8d\xe2\xa4\x43\xc8\xbb\x1f\x4d\x72\xd0\xa9\x93\x10\xff\xaf\x4f\x5f\x76\xcd\xdd\x79\xc6\xc1\x85\x08\x10\x86\x9c\xa4\xa0\x01\xa5\xfb\xe4\x35\x80\xd2\xcb\x82\x74\x39\x4a\xeb\x5a\x87\x58\x58\xa2\xeb\xeb\xce\xc5\xb6\x67\x19\xf5\x9b\xce\xc8\x32\x87\x86\x35\x28\x9f\xee\xa1\x5c\x59\x66\x16\xd4\x3e\x94\x6e\xba\x51\x93\x86\xfa\x96\xa2\x8f\x73\xbd\xc5\xf5\x54\xc2\x7e\xc3\xa2\xc1\x02\xfc\x4e\xb1\xd9\xc4\x8c\xc5\x05\x54\xca\x65\xc4\xd3\x19\xbf\x7f\x5e\x68\xf4\x95\x4b\x48\x71\x59\x8f\xfc\x8c\x2e\x67\x8e\xad\x79\x6e\x15\x1e\x06\xf4\xc1\x65\x2f\x8e\xe6\x5f\x9c\x3e\xf9\x61\xac\x25\x22\x0b\xa0\x58\xe4\xc9\x7e\x25\x6f\xc3\x80\xda\xc0\x44\x54\x81\xb2\x00\xa0\xfa\xe4\xe9\x22\x21\x96\x3e\x1a\x7d\xdd\x1f\xe0\x58\x52\xce\xdc\xe2\x23\x94\xee\xa4\x2b\x64\x11\x0b\x2b\xfc\x05\x00\x00\xff\xff\xb8\x92\x81\x77\x5f\x01\x00\x00")

func tmpl_main_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_main_tmpl,
		"tmpl/main.tmpl",
	)
}

var _tmpl_server_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xdd\x6f\xd3\x30\x10\x7f\x8e\xff\x8a\x23\xda\xa6\x04\x75\x8e\xc6\x63\xd1\x5e\x80\xf1\x21\xc1\x56\xa1\x09\x1e\x10\x42\x59\x72\x4d\xcd\x5a\x3b\x75\xdc\x7d\xc8\xf2\xff\x8e\xce\x8e\xb3\x66\x19\x43\x44\x6a\x1a\xdf\xfd\xee\xee\x77\x1f\x3e\x6b\x8f\xe1\xa0\x2d\xab\xeb\xb2\xc1\xf3\x72\x83\x30\x3f\x05\xbe\xd8\x3b\x3b\xc7\x3c\xa6\x43\x7d\x23\x2a\xfc\x24\x0d\xea\x65\x59\x79\x60\xab\x85\x34\x4b\x48\x0f\x3b\x7e\xd8\xa5\x63\x3b\xee\xdf\xc7\x8f\xcc\x87\x10\xd1\x37\xeb\x63\x83\xb5\x60\xd4\x67\x75\x8b\x7a\x0c\x26\x8c\xd8\xb4\x4a\x1b\xc8\x58\x92\x56\x4a\x1a\xbc\x33\x29\x4b\x52\x94\x95\xaa\x85\x6c\x8a\xdf\x9d\x92\x24\x10\x8a\xde\x12\x4d\xb1\x32\xa6\x4d\x19\x4b\xd2\x46\x98\xd5\xee\x8a\x57\x6a\x53\x5c\x29\xd9\xc8\x9b\xa2\x51\xd7\xc2\x14\x3b\x23\xd6\x05\x85\x41\x4d\x36\xd6\x0e\xe4\xc1\xb9\xa9\xa4\x10\x94\xb6\x2c\xd7\x05\xca\xba\x55\x42\x9a\x94\xe5\x8c\x15\x05\x7c\x40\x73\xd1\x1a\xa1\x64\x07\x9c\x73\xb6\xdc\xc9\x6a\x4f\x96\x75\x94\xd7\xb4\x76\xe0\x5c\x0e\x3f\x7e\x06\x02\x3c\x80\xc1\xb2\x24\x08\xce\xfa\x18\x1d\x55\x6a\x53\x5e\xe3\x20\xc8\xba\x9c\xb1\x44\xb5\x41\xf5\xc8\x81\x75\x51\x77\x0a\x65\xdb\xa2\xac\x33\x3a\xcd\x1a\x34\x1f\x2f\x2f\x17\x03\xa5\x71\x8c\x9c\x73\x3e\x23\xaf\x1a\xcd\x4e\x4b\x20\x13\xe6\x58\xc8\xe4\x79\x53\xc0\xc1\xc9\x53\xc9\xfc\x27\x4d\x06\x00\x60\xad\x2e\x65\x83\x70\x10\x5d\xfb\x61\x79\x88\x48\xf3\x04\xfd\xd3\x7b\xfd\x2e\xcc\x8a\x48\x46\x50\xcf\x72\x30\xb2\x83\x01\x3d\x5f\xd0\xac\x54\x3d\x1f\xce\xd4\xe8\x21\x18\x0f\x5a\x1a\x81\xd9\xc8\x6a\x51\x9a\xd5\x7c\xef\x3c\xb6\xa2\xe8\x84\x98\xda\x45\x0e\xf3\x11\xe5\x21\x1d\x3e\x72\xd3\x8f\x7b\xd4\xce\x58\x92\xd0\xd5\x11\x4b\xc0\x2d\x64\x6b\x94\x7b\xd8\x45\xa9\xcb\x4d\x97\xc3\x89\x73\x2c\x49\x92\xaf\xb8\xdd\x61\x67\xde\x61\xa5\x6a\xd4\x73\x90\x62\x1d\xcc\x01\xd7\x9d\xbf\x43\x91\xd1\x04\x5a\xfb\x8f\x09\x11\xe7\x7a\x60\xf4\x23\xeb\x51\xf1\x5d\x1e\x1b\x36\xa8\x92\x27\xa6\xc8\x5a\x78\xbe\xa1\x7e\x3f\x50\x8e\x0d\xfe\x2d\xc7\x57\xce\x85\x69\xfc\x17\xd5\xec\x17\xf4\xeb\x81\xbf\x0d\xff\x33\xd0\xf0\x92\x96\x01\xef\x21\x39\x64\x3a\x7c\x81\x88\xb7\xd1\xba\x19\xa0\xd6\xf4\x53\x3a\xa7\xc9\xf5\x1b\xab\xc7\x5d\xde\xb7\x7e\x63\x65\x42\xd6\x78\x37\xa1\x07\x27\x39\xf7\x10\x5f\x01\x8d\x5b\xc2\x52\x46\x52\x98\x6f\xe5\x7a\x87\x63\x47\x04\xa2\x86\x6a\x4d\x38\x5a\x5c\xfc\x1c\x6f\xfb\x66\x64\x9a\xbf\x51\xf5\x7d\xce\xc3\x39\x3b\xd2\xb8\xcd\x5f\x7b\xf0\x8b\x53\xea\x29\x1c\x1d\xc5\x93\x50\xfc\xec\xe2\x3d\x91\x8d\x25\xa7\x9e\x93\x96\x25\xee\xa1\x0f\x1a\xb7\x41\xe8\xcb\x4c\x9d\xf2\x05\x47\x59\x3b\xc7\xfe\x04\x00\x00\xff\xff\x9f\x37\x12\x38\xfc\x05\x00\x00")

func tmpl_server_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_server_tmpl,
		"tmpl/server.tmpl",
	)
}

var _tmpl_service_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x6a\x83\x40\x10\x86\xcf\xd9\xa7\x18\x3c\x25\x12\xcc\xbd\xc7\xf4\xd2\x53\x29\x69\x1f\x20\xcb\xf2\x27\x6c\xab\xbb\x9b\xd9\x49\x51\xc4\x77\x2f\xba\x46\x25\x34\x90\x93\xfa\xf3\xcf\xe7\x37\x13\xb4\xf9\xd1\x67\x50\xdb\x52\xf1\x91\xde\xdf\x75\x05\xea\x3a\xa5\x6c\x15\x3c\x0b\x65\xc6\x3b\x41\x2d\x99\x52\xbb\x1d\x7d\x82\x7f\xad\x01\xd9\x48\x9a\xa2\xad\x42\x09\xb2\x4e\xc0\x27\x6d\x40\x27\xcf\x7d\x9c\x3a\x85\x92\x26\x60\x9e\x98\x5a\xad\x5a\xbd\xa1\x2c\xfd\xda\x48\x4d\x23\xbd\x78\x4d\xcf\x2d\x05\xca\x0f\xb8\x5c\x11\x65\x43\xeb\xfc\x80\x18\xbc\x8b\xd8\x12\x98\x3d\x6f\xd4\x6a\xdf\xe0\xff\x41\xc6\x85\xf2\x7d\x83\xc5\xf4\xf0\x75\x07\xe8\x86\x3d\xc6\x12\x05\x46\x84\x93\x7e\x1b\x4e\xd1\xa8\x7d\x2b\x44\xe1\xab\x91\xde\x79\x38\x4c\x14\xb6\xee\x4c\xc7\xef\xe8\xdd\x4b\xe6\x74\x85\xec\x38\x21\xd3\x9f\xa8\x28\x26\xc6\x98\xcc\x90\x2f\xd4\x72\x07\x19\x8e\x7b\x83\xcc\xfe\x8f\xd5\x16\x9d\xe7\xed\x16\xa7\x98\x05\x97\xe1\x73\x8e\x7f\x01\x00\x00\xff\xff\x3a\x5f\xe1\x0d\x31\x02\x00\x00")

func tmpl_service_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_service_tmpl,
		"tmpl/service.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"tmpl/crud.tmpl": tmpl_crud_tmpl,
	"tmpl/endpoints.tmpl": tmpl_endpoints_tmpl,
	"tmpl/handlers.tmpl": tmpl_handlers_tmpl,
	"tmpl/main.tmpl": tmpl_main_tmpl,
	"tmpl/server.tmpl": tmpl_server_tmpl,
	"tmpl/service.tmpl": tmpl_service_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"tmpl": &_bintree_t{nil, map[string]*_bintree_t{
		"crud.tmpl": &_bintree_t{tmpl_crud_tmpl, map[string]*_bintree_t{
		}},
		"endpoints.tmpl": &_bintree_t{tmpl_endpoints_tmpl, map[string]*_bintree_t{
		}},
		"handlers.tmpl": &_bintree_t{tmpl_handlers_tmpl, map[string]*_bintree_t{
		}},
		"main.tmpl": &_bintree_t{tmpl_main_tmpl, map[string]*_bintree_t{
		}},
		"server.tmpl": &_bintree_t{tmpl_server_tmpl, map[string]*_bintree_t{
		}},
		"service.tmpl": &_bintree_t{tmpl_service_tmpl, map[string]*_bintree_t{
		}},
	}},
}}
