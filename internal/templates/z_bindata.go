package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _tmpl_crud_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xc1\x6f\xda\x30\x14\xc6\xcf\xf5\x5f\xf1\xe4\x53\x5b\x75\xc9\x65\xda\x21\x57\x82\x50\x25\xb4\xa2\xb6\x9c\xa6\x49\x58\xe1\x91\x7a\x40\x9c\xda\x8f\xad\x53\x96\xff\x7d\x4a\x1c\x92\x00\x76\x44\x37\x7a\x22\xf1\xf7\xf1\xde\x2f\xcf\xfe\x9c\x8b\x64\x2d\x52\x84\xa2\x80\x60\x66\x9f\xbf\x8a\x2d\x42\x59\x32\x26\xb7\xb9\xd2\x04\x3c\x51\x19\xe1\x1b\x71\xc6\xc2\xb0\x36\x36\x8e\x27\xd4\x3f\x65\x82\x20\x0d\x08\x18\x3d\xce\x63\x90\x19\xa1\x5e\x89\x04\x61\xa5\x34\x88\xbe\x19\x8c\x75\x07\x2c\x0c\x53\x15\xa5\x98\xa1\x16\x84\x90\xaa\xb5\xa4\xbd\x08\x9f\xba\x0a\xa7\x8d\x18\xfd\xce\x5d\xeb\xbd\xb6\x05\x03\x00\xa8\x3a\xac\x25\x45\xb0\x45\x7a\x51\xcb\x88\x4f\xc6\xcf\x1c\x72\x41\x2f\x11\x0f\xdb\xff\xff\x01\x52\x53\xf5\x0b\x75\xfd\x34\xdb\xec\xb4\xd8\x40\x59\x86\xc5\x7d\x5c\x72\x76\x35\x41\xba\x4e\xe8\x0d\x9a\xaf\x0f\x46\xf6\xf7\x0e\x34\xbe\xc2\xed\x04\xa9\x07\xf2\x88\xaf\x3b\x34\x74\x03\xd7\x27\x82\xc9\x55\x66\xf0\x0e\x50\x6b\xa5\x6f\xd8\xff\xf3\x71\x76\x35\x95\x66\x88\xad\x92\xdd\x70\x27\xca\x59\x74\xb3\x87\xa7\xf7\xe0\x55\x35\x46\x1a\x05\xe1\x00\xa3\x35\xb8\x29\x1d\xda\x79\x9c\xf3\x77\xef\x72\x55\x67\x9e\x2f\x87\x59\xad\xc1\xcd\xea\xd0\xce\x62\x8d\xc7\xd3\xf1\xf3\xf8\x5f\x70\x63\xdc\xe0\x20\xae\x35\xb8\x70\x6b\x22\x56\xd6\x39\x76\x1e\x60\x08\x82\xc0\xa6\xcc\x2d\x1b\xd2\xbb\x84\x9a\x94\xdd\xc7\xd5\xbb\xcc\x52\x58\xfc\x30\x2a\x8b\xb8\x5c\xf2\x85\xa7\xba\x9d\x89\xbf\x7c\xa3\x1f\xd4\xef\x5f\x1e\xb7\xfd\x97\xa6\x5d\x51\xb4\xb3\xda\x4b\x6d\x7f\x77\x04\xba\xfe\x1e\xfd\xa0\xff\xc3\x6a\x65\x90\xaa\xcb\xe5\xcb\xe7\x7d\x4f\x55\xaf\xf1\x45\x6d\x98\xca\xad\x24\x38\x34\x6c\xaa\x35\x3f\xc6\xf1\x1c\x7c\x86\xe3\x41\xb4\x47\xa1\x1d\xc2\xb7\xef\x9e\x99\x0c\xa7\x73\x4f\xe6\xcb\x5f\x87\xe6\x75\x5c\x6c\x93\xbc\x39\x1f\x84\xb8\xf4\x51\xf1\xa5\xbb\x83\xf0\x3a\x3e\x92\xe1\x78\x12\x7e\xcb\xc5\x28\x7c\x17\x47\x07\xe1\x75\x9c\x77\x31\xfc\x0d\x00\x00\xff\xff\x43\x0d\xdb\x7a\x6d\x08\x00\x00")

func tmpl_crud_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_crud_tmpl,
		"tmpl/crud.tmpl",
	)
}

var _tmpl_crud_handler_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x5f\x4f\x9c\x4e\x14\x7d\x66\x3e\xc5\xfd\x4d\x7e\x36\x60\x56\xb0\xaf\x26\xfb\xd0\x68\x6b\x9b\x18\xb5\x4d\xfb\x64\x7c\x40\xf6\x82\x13\x61\x86\x9d\xb9\xb4\x6e\x08\xdf\xbd\x99\x81\x75\x71\x17\x94\x4d\x34\x7d\x12\xee\xdc\x3f\xe7\x9e\x73\x70\xb6\xae\x8f\xe0\x7f\x51\x94\xf9\x65\x5c\x20\x9c\xcc\xa1\xd4\x42\x52\x0a\xdc\xc6\x0e\xcc\xd7\x58\x2e\x72\xd4\x1c\x42\x77\x7e\xd4\x34\xcc\x55\x2c\x62\xb5\x5d\x70\x60\xce\x3e\x5d\xf5\x13\x59\x19\x27\x0f\x71\x86\x70\xdf\x36\x31\x8c\x89\xa2\x54\x9a\xc0\x67\x1e\x4f\x94\x24\x7c\x24\xce\x3c\x8e\x5a\x2b\x6d\x38\x63\x1e\xaf\x6b\x08\xaf\xbb\xb2\xa6\xe1\x3b\x91\x48\x48\x42\x2d\xe3\x3c\x32\xa4\x74\x9c\xa1\x4d\xc9\x04\xdd\x57\x77\x61\xa2\x8a\xe8\x4e\xc9\x4c\xfe\x8e\x32\xf5\x20\x28\xaa\x48\xe4\x11\x4a\x12\xb4\x8a\x96\x15\xea\xd5\xab\xc9\xb9\xca\x38\x0b\x18\x63\xb4\x2a\x11\xea\xba\x47\x4d\xd3\x80\x21\x5d\x25\x04\x35\xf3\xec\xc9\x9a\x02\x77\xe0\xb0\x84\xcf\xc3\xac\x61\x2c\xad\x64\x02\xbe\x80\xc3\xad\x5e\x01\x9c\x23\xf9\x09\x3d\x42\xc7\x43\x78\xda\xfe\x9d\x81\xc6\xa5\x4b\x5f\x6f\xdd\x55\x84\xe7\x48\x36\xda\xbd\xfe\xc0\x65\x85\x86\x02\xf0\xa7\xe4\x9a\x52\x49\x83\x33\x70\x4c\x07\x76\x03\x47\x8b\x40\xe3\x62\x56\x46\xb1\x85\x3e\xfc\x6e\x19\xb3\x10\x67\xcc\xf3\x1c\x7d\xe1\xe7\x65\x15\xe7\x3e\x17\x0b\xee\x60\x86\xdf\xce\x82\xcd\xe1\x85\x28\x04\xf9\x1f\x6d\x24\x60\xcc\x13\xa9\xeb\xfc\xdf\x1c\xa4\xc8\xed\x44\x4f\x23\x55\x5a\xda\x57\x37\x94\x79\x4d\x9b\x96\xa3\xf4\xd7\x70\x02\x98\xcf\xe1\x78\x28\x5d\x69\x13\x5e\xe2\x1f\x9f\xaf\xdd\x74\x02\x1a\x8d\xaa\x74\x82\x20\x15\x41\xaa\x2a\xb9\xe0\x41\xdb\xb5\xab\xfd\x80\x8f\x25\x4a\x83\x66\x84\x10\x3b\xa6\x17\x3e\x81\xd6\x2c\x3f\x55\x2f\xf8\x04\xed\xe6\xf8\xd6\xee\xd6\xcc\x2c\xa4\x97\xb5\xbd\x10\x66\x4f\x71\x6d\xc5\x64\x75\x77\x92\xdf\x48\xde\xab\x34\x35\x48\xbe\x55\xb6\x7d\xdc\x51\xd7\x1e\xb9\xa7\x7d\x55\x26\x2c\x8c\x85\x51\xc4\x0f\xe8\xdf\xdc\x0e\x6d\xd5\xdb\x68\xf6\xdc\x13\x01\xf3\x52\xa5\x41\xcc\x3a\x7d\x6c\x23\x1d\xcb\x0c\x61\x9d\xe2\x26\xbb\x21\x37\xe2\x16\xe6\xe3\x3a\xae\xb6\x0c\x32\x9d\xdd\xce\x2b\xa4\xae\xf3\x4a\xc7\x79\xcf\x34\x6e\xee\x44\x67\x9c\x6a\x8c\x09\xf7\xf3\x46\x5b\x33\xd9\x1d\x03\xe9\x23\xfe\x70\x44\xb6\x4f\x5f\xb4\x2a\xfa\x64\x59\xa1\x7b\xef\x01\xf3\xc6\x7c\xb4\xd9\x68\x2d\x4f\x30\xd9\x16\x2f\xa8\x30\xba\xc5\xf4\x6f\x76\x35\xf5\x73\xfd\x55\x2e\xf6\x16\xa5\xad\x99\x2c\xca\x40\xfa\x7b\x8a\xb2\xd9\xe8\x4d\x45\x19\xdd\xe2\x1d\x44\x39\xc3\x1c\xf7\x15\xa5\xad\x19\x12\xc5\x91\xfc\x6f\xef\xbd\xbd\xae\xbc\x67\x52\xec\x40\xdc\x70\x33\x83\xfe\xf5\xf4\xc4\xe8\x38\xfd\x70\xd8\xfb\xb1\xf2\xe4\xa4\x41\x36\x7b\x09\x16\x9d\x5d\xac\x6d\x31\x1f\x72\xd0\xab\xe6\xe9\xb5\xab\x9b\x2d\xa4\xdb\x4e\xb7\xff\x52\x5f\xc3\x14\x0c\xae\xd2\x21\x75\x0d\x26\xe0\x1c\xe8\xe0\xc0\xfd\x0d\x00\x00\xff\xff\x76\x1f\xb9\xa0\x17\x0b\x00\x00")

func tmpl_crud_handler_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_crud_handler_tmpl,
		"tmpl/crud_handler.tmpl",
	)
}

var _tmpl_dao_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\xc1\x6e\xdb\x3a\x10\x3c\x8b\x5f\xb1\x10\x5e\x02\x29\x70\xc8\x7b\x80\x77\x48\xa2\x16\xc8\xc5\x69\x91\xf6\x54\x14\x01\x25\xad\x65\x36\x12\xa9\x90\x2b\xb7\x8e\xa0\x7f\x2f\x28\x31\xae\x6a\x27\xa8\x01\x9f\x6c\x68\x67\x67\x67\x66\x97\x7d\x7f\x09\xff\x95\xd2\x2c\x65\x83\x70\xf5\x3f\xb4\x56\x69\x5a\x41\x7c\xe6\xb2\xeb\xfb\x18\xf8\xf8\xfd\x72\x18\xd8\x2b\xf0\xae\x69\xeb\x39\x50\x35\x6d\x7d\xe6\xe2\x3f\x24\x1e\xcc\x5a\x59\x3c\xc9\x0a\xa1\xef\x81\x7f\x9a\xfe\x8f\x45\x5f\x53\x4d\x6b\x2c\x41\xc2\x00\x00\xe2\xc2\x68\xc2\x5f\x14\x33\x16\xc5\x95\xa2\x75\x97\xf3\xc2\x34\x22\x37\xba\xd2\x1b\x51\x99\x27\x45\xa2\x23\x55\x0b\xd4\xa4\x68\x2b\x4c\x4b\xca\xe8\x78\x6a\x3e\xa6\xe1\xb9\x43\xbb\x3d\xc4\xff\x50\xfa\x65\xdd\x89\xca\xd8\x26\x66\xd1\xe3\x7b\x35\x51\x2a\x59\x63\x41\x4e\x34\x5b\xf7\x5c\xc7\x20\x04\x28\xad\x48\xc9\x5a\xbd\x20\x8c\x1f\x59\xca\x18\x6d\xdb\xd1\xed\x2e\x86\x61\x00\xa5\x09\xed\x4a\x16\x08\x3d\x8b\x6e\x2d\x4a\xc2\x24\xd8\xe5\xb7\xd3\xef\x02\x2e\x7c\x44\xa1\x23\x05\xb4\xd6\x58\x16\x7d\xf6\x9a\x0f\xb1\x9c\xf3\xd1\x0d\x1f\xeb\x29\x24\xdf\xbe\xcf\xdb\x17\x53\x7b\x3a\x7a\xfd\xda\x96\x47\xcf\xf3\xf8\x0c\x6b\x3c\x16\x3f\x30\x26\x04\x2c\xf1\xe7\x9e\x61\xd3\xa2\x76\x50\x18\xad\xb1\xf0\x5b\x72\x40\x06\xb2\x1b\xd8\x28\x09\xb4\x46\xa8\xd4\x06\x35\x64\x0f\x4b\x0e\x77\x04\x16\xa9\xb3\xda\x81\xd4\x90\x5d\xdf\x7b\xa8\x2c\x0a\x74\x6e\x84\x96\x92\x64\x2e\x1d\x72\xb6\xea\x74\x71\x38\x2b\x29\x73\xb8\xf0\x0b\xe2\xd9\x4d\xba\x1f\x7c\xcf\xa2\x89\x1c\xce\x43\x65\xbc\xda\x61\xe8\x59\x14\x95\xf9\x15\x94\xf9\x82\x45\x83\xf7\x31\xdf\x5b\x00\x81\x23\xdb\x15\xe4\x59\x66\x43\x3c\x78\x94\x92\xa8\x31\x93\x59\x43\x0a\x61\xb9\x8f\x70\x10\xdf\x74\x84\x6f\xa5\x38\xa9\x74\x5d\x4d\xfe\x39\x29\x5e\xe6\x3c\xd0\x4c\x3d\xe9\xce\xc4\x84\xe2\x1f\x5e\xb3\x7f\x57\xc6\x74\x36\x6f\xa8\xf0\x57\xa3\xd0\x1d\x7b\x40\x5e\xda\x46\xda\x30\xd8\xc1\xdf\xa8\xb9\xec\x89\xed\x8b\x95\xda\xad\x8c\x6d\x12\x6f\x63\x37\x8e\x73\x9e\xf2\x8f\x4a\x97\xc9\x79\x60\xda\xf7\xe4\x16\xc7\x9b\x0b\x07\x7d\x6a\xc6\x0f\x72\x73\x42\xc2\xe1\x95\x9c\x2a\x22\xd0\xfc\x43\xc6\xef\x00\x00\x00\xff\xff\xa9\x49\xe3\x60\x9c\x05\x00\x00")

func tmpl_dao_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_dao_tmpl,
		"tmpl/dao.tmpl",
	)
}

var _tmpl_endpoints_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xdf\x6a\xe3\x3c\x10\xc5\xaf\xa5\xa7\x18\x4c\x0b\x36\x34\x0a\xbd\x0d\xe4\xea\xa3\x17\x1f\x2c\x4b\xd9\xdd\x17\xd0\xda\x93\x44\x24\x96\x9c\x91\x9c\x66\x11\x7a\xf7\x45\xf2\x9f\x28\x4d\xb6\xed\x45\x08\x96\xce\x9c\x39\xfa\x8d\xe4\xfd\x02\x1e\x3a\x59\xef\xe5\x16\xbf\xcb\x16\x61\xb5\x06\xf1\x9a\x7d\x2f\x42\xe0\x49\x64\x91\x4e\xaa\xc6\xff\xb5\x43\xda\xc8\x3a\x29\x3b\x52\xda\x6d\xa0\x78\xb4\xe2\xd1\x16\xd7\x85\xe2\x6e\xf9\xdc\x63\xde\xe5\x63\x77\xf0\x1e\x9c\xf9\x66\xde\x90\xae\xd5\x51\xa3\xda\xce\x90\x83\x92\xb3\xa2\x36\xda\xe1\xd9\x15\x9c\xb3\x62\xab\xdc\xae\xff\x2d\x6a\xd3\x2e\xb7\x66\xb1\x57\x6e\x19\x7f\xa8\x9b\xce\x28\xed\x0a\xce\x0a\xef\xe7\x54\x10\x42\xc1\x2b\xce\x97\x4b\x98\x14\x16\x84\x10\xdc\xfd\xe9\x30\x5b\xb2\x8e\xfa\xda\x81\xe7\xde\x03\x49\xbd\x45\x78\x98\x36\x53\xf2\x97\x59\x19\x02\x67\xe9\x70\xd3\xbe\x18\x03\x4f\x92\xd9\x75\x2e\x8a\xa6\xa8\x9b\x74\xf2\x90\xb2\xb4\x72\x8f\x17\x4b\x42\xd7\x93\xb6\x20\x35\xbc\xbc\x4f\xf4\xb6\x43\x42\x40\x59\xef\x66\x5f\x50\xfa\x64\xf6\x68\xa3\x91\xdb\x21\xd4\x86\x08\x6d\x67\x74\xa3\xf4\x16\x5a\x74\x3b\xd3\x80\xd1\x69\xaf\x23\x73\x52\x0d\x36\x30\xc2\x15\x7c\xd3\xeb\xfa\xba\x7f\x69\xe3\x18\x6e\x67\x1d\x42\x95\x11\xf2\x9c\x0d\x39\x2f\x6b\x3e\x92\xf8\x02\xae\x8f\x79\xad\x52\x9a\x98\xe0\x5f\x8a\xd2\x56\x4f\xa9\xd5\x04\x91\x25\x8e\x5f\xe9\xfd\x8e\x75\x8e\x7a\x2e\x3a\x29\x39\xb0\x92\xd6\xde\x25\xf5\x71\xb6\xcf\xe1\xcd\x91\x32\x88\xd1\xbc\xac\xdd\x19\xc6\xab\x2d\xfe\x1b\xfe\x9f\x80\xf0\xd8\xa3\x8d\x53\x1e\xbd\x7c\xa8\xa0\xcc\xbe\x9e\x00\x89\x0c\x55\xd1\x8d\x9d\x24\xc5\x17\xc2\x58\xbc\x02\x79\x4d\x5c\x43\xa2\x41\xcb\x19\xab\xd2\x1c\xe0\xe1\x80\x1b\xf7\x53\x35\xe9\x41\x16\xb1\x28\xd9\x15\x03\xd7\x34\x29\xb5\x01\x3c\x42\x79\x40\x9d\x1d\xfb\x07\xda\xfe\xe0\x6c\x05\xcf\xc3\x48\x87\x99\xce\x66\x6b\x28\xae\x5c\xd2\xa8\xe2\x23\x66\xde\xdf\xf5\x7b\x95\x24\xdb\x68\x37\x15\x5c\xbc\x42\x80\x35\x58\x71\x8f\x7a\x24\x56\x0d\x57\xe1\x60\x31\xbb\x5c\x23\xb4\x5f\xf1\x55\xaf\xd6\x11\x57\x83\xe7\x9b\x76\xf0\x5c\x89\x24\x49\x85\x84\xc7\xa8\x1d\x4b\x45\x19\x1b\xe6\x3e\x21\xdc\x30\xfb\x24\x5a\x1a\x5e\xc5\xb3\xf3\xb3\x69\xde\x33\xe9\xe1\xf2\x7a\x8f\xba\x09\xe1\x6f\x00\x00\x00\xff\xff\xd0\xc2\x71\xf6\x8a\x05\x00\x00")

func tmpl_endpoints_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_endpoints_tmpl,
		"tmpl/endpoints.tmpl",
	)
}

var _tmpl_entity_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcb\xb1\x0a\xc2\x30\x18\x04\xe0\xb9\x79\x8a\xa3\xbb\xc9\x22\x0e\xdd\x44\x17\x17\x27\x9d\x6d\xb0\x3f\x21\xb4\x49\x4a\xbc\x0e\xa1\xf4\xdd\xa5\xa2\xa0\x9b\x37\x1d\xc7\x77\xca\x18\xcc\x33\xf4\xd9\x06\xc1\xb2\x40\x6b\xad\x8c\x71\xa9\x71\x12\x25\x5b\x0a\x5c\xea\x3d\x21\x91\x9e\x05\x9b\xb8\xba\xaf\x83\x62\x19\x7f\x06\x3c\x98\xa7\x3b\x31\xab\xea\x74\xc4\x3b\x3e\x72\xb7\x7d\xb5\xd6\xa5\x1c\x9a\x7a\xcc\x3e\xd8\x5c\x6e\xbd\x94\xba\x55\xd5\x21\x8b\xa5\x74\x7b\x82\x3e\x88\xbe\xf8\x20\x1f\x19\x13\x11\xa7\x61\x58\xd9\x75\xec\xfe\x60\x8b\x7a\x06\x00\x00\xff\xff\x6a\x46\xd0\xfb\xd5\x00\x00\x00")

func tmpl_entity_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_entity_tmpl,
		"tmpl/entity.tmpl",
	)
}

var _tmpl_handlers_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x41\x4e\xc3\x30\x10\x45\xd7\x9d\x53\x7c\x65\x81\x92\x2a\x4a\xef\x50\x36\xb0\x89\x10\x9c\xc0\x98\xa1\xb1\x70\xec\x74\x3c\x21\x8d\xa2\xdc\x1d\x95\x46\x90\x45\x41\xb0\xb1\x17\xfe\xdf\xef\xfd\xce\xd8\x37\x73\x60\x34\x26\xbc\x78\x96\x44\xe4\xda\x2e\x8a\x22\xa7\x4d\x66\x63\x50\x3e\x69\x46\xb4\xc9\xa6\x09\xd5\xc3\x12\x9e\xe7\x8c\x0a\x22\x1d\xbb\xaf\xe2\x7d\xdb\x79\x24\x95\xde\x2a\x26\x9a\x89\x5e\xfb\x60\x91\x37\xd8\xae\x02\x05\xee\xd8\xfb\x98\x5b\x3d\x61\xf9\xbb\xba\xbd\xdc\x25\x84\x8f\xd8\xae\x28\xb5\x69\xcf\xa4\xea\x91\x8f\x3d\x27\x2d\x90\x5f\x7f\x4d\x5d\x0c\x89\x4b\xb0\x48\x94\x02\x13\x6d\x84\xb5\x97\x80\xe0\x7c\x79\x3e\x7e\xb6\xd9\x8f\xfc\x3f\x97\xfd\xc8\xbf\xeb\x7c\x06\xfe\x64\xb4\xdb\xa1\xe6\x01\x56\xd8\x28\x27\x18\x04\x1e\x90\x58\xde\x9d\x65\x0c\x4e\x1b\x3c\xf7\xc9\x05\x4e\x09\x3e\x1e\x9c\xad\x2e\x1b\x6a\x1e\xf2\x02\x57\xc8\x4f\x4b\xf5\x9b\x76\xb3\xda\x3a\xcd\x34\xd3\x47\x00\x00\x00\xff\xff\x91\xab\xfd\x00\xec\x01\x00\x00")

func tmpl_handlers_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_handlers_tmpl,
		"tmpl/handlers.tmpl",
	)
}

var _tmpl_main_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x8a\xc3\x30\x0c\x86\x67\xeb\x29\x84\x27\x1b\x82\xb2\x17\x3a\xdf\x76\x57\xe8\x78\xdc\xe0\x26\x3a\xc7\x34\xb1\x8d\xe2\xa4\x43\xc8\xbb\x1f\x4d\x72\xd0\xa9\x93\x10\xff\xaf\x4f\x5f\x76\xcd\xdd\x79\xc6\xc1\x85\x08\x10\x86\x9c\xa4\xa0\x01\xa5\xfb\xe4\x35\x80\xd2\xcb\x82\x74\x39\x4a\xeb\x5a\x87\x58\x58\xa2\xeb\xeb\xce\xc5\xb6\x67\x19\xf5\x9b\xce\xc8\x32\x87\x86\x35\x28\x9f\xee\xa1\x5c\x59\x66\x16\xd4\x3e\x94\x6e\xba\x51\x93\x86\xfa\x96\xa2\x8f\x73\xbd\xc5\xf5\x54\xc2\x7e\xc3\xa2\xc1\x02\xfc\x4e\xb1\xd9\xc4\x8c\xc5\x05\x54\xca\x65\xc4\xd3\x19\xbf\x7f\x5e\x68\xf4\x95\x4b\x48\x71\x59\x8f\xfc\x8c\x2e\x67\x8e\xad\x79\x6e\x15\x1e\x06\xf4\xc1\x65\x2f\x8e\xe6\x5f\x9c\x3e\xf9\x61\xac\x25\x22\x0b\xa0\x58\xe4\xc9\x7e\x25\x6f\xc3\x80\xda\xc0\x44\x54\x81\xb2\x00\xa0\xfa\xe4\xe9\x22\x21\x96\x3e\x1a\x7d\xdd\x1f\xe0\x58\x52\xce\xdc\xe2\x23\x94\xee\xa4\x2b\x64\x11\x0b\x2b\xfc\x05\x00\x00\xff\xff\xb8\x92\x81\x77\x5f\x01\x00\x00")

func tmpl_main_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_main_tmpl,
		"tmpl/main.tmpl",
	)
}

var _tmpl_server_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xdd\x6f\xd3\x30\x10\x7f\x8e\xff\x8a\x23\xda\xa6\x04\x75\x8e\xc6\x63\xd1\x5e\x80\xf1\x21\xc1\x56\xa1\x09\x1e\x10\x42\x59\x72\x4d\xcd\x5a\x3b\x75\xdc\x7d\xc8\xf2\xff\x8e\xce\x8e\xb3\x66\x19\x43\x44\x6a\x1a\xdf\xfd\xee\xee\x77\x1f\x3e\x6b\x8f\xe1\xa0\x2d\xab\xeb\xb2\xc1\xf3\x72\x83\x30\x3f\x05\xbe\xd8\x3b\x3b\xc7\x3c\xa6\x43\x7d\x23\x2a\xfc\x24\x0d\xea\x65\x59\x79\x60\xab\x85\x34\x4b\x48\x0f\x3b\x7e\xd8\xa5\x63\x3b\xee\xdf\xc7\x8f\xcc\x87\x10\xd1\x37\xeb\x63\x83\xb5\x60\xd4\x67\x75\x8b\x7a\x0c\x26\x8c\xd8\xb4\x4a\x1b\xc8\x58\x92\x56\x4a\x1a\xbc\x33\x29\x4b\x52\x94\x95\xaa\x85\x6c\x8a\xdf\x9d\x92\x24\x10\x8a\xde\x12\x4d\xb1\x32\xa6\x4d\x19\x4b\xd2\x46\x98\xd5\xee\x8a\x57\x6a\x53\x5c\x29\xd9\xc8\x9b\xa2\x51\xd7\xc2\x14\x3b\x23\xd6\x05\x85\x41\x4d\x36\xd6\x0e\xe4\xc1\xb9\xa9\xa4\x10\x94\xb6\x2c\xd7\x05\xca\xba\x55\x42\x9a\x94\xe5\x8c\x15\x05\x7c\x40\x73\xd1\x1a\xa1\x64\x07\x9c\x73\xb6\xdc\xc9\x6a\x4f\x96\x75\x94\xd7\xb4\x76\xe0\x5c\x0e\x3f\x7e\x06\x02\x3c\x80\xc1\xb2\x24\x08\xce\xfa\x18\x1d\x55\x6a\x53\x5e\xe3\x20\xc8\xba\x9c\xb1\x44\xb5\x41\xf5\xc8\x81\x75\x51\x77\x0a\x65\xdb\xa2\xac\x33\x3a\xcd\x1a\x34\x1f\x2f\x2f\x17\x03\xa5\x71\x8c\x9c\x73\x3e\x23\xaf\x1a\xcd\x4e\x4b\x20\x13\xe6\x58\xc8\xe4\x79\x53\xc0\xc1\xc9\x53\xc9\xfc\x27\x4d\x06\x00\x60\xad\x2e\x65\x83\x70\x10\x5d\xfb\x61\x79\x88\x48\xf3\x04\xfd\xd3\x7b\xfd\x2e\xcc\x8a\x48\x46\x50\xcf\x72\x30\xb2\x83\x01\x3d\x5f\xd0\xac\x54\x3d\x1f\xce\xd4\xe8\x21\x18\x0f\x5a\x1a\x81\xd9\xc8\x6a\x51\x9a\xd5\x7c\xef\x3c\xb6\xa2\xe8\x84\x98\xda\x45\x0e\xf3\x11\xe5\x21\x1d\x3e\x72\xd3\x8f\x7b\xd4\xce\x58\x92\xd0\xd5\x11\x4b\xc0\x2d\x64\x6b\x94\x7b\xd8\x45\xa9\xcb\x4d\x97\xc3\x89\x73\x2c\x49\x92\xaf\xb8\xdd\x61\x67\xde\x61\xa5\x6a\xd4\x73\x90\x62\x1d\xcc\x01\xd7\x9d\xbf\x43\x91\xd1\x04\x5a\xfb\x8f\x09\x11\xe7\x7a\x60\xf4\x23\xeb\x51\xf1\x5d\x1e\x1b\x36\xa8\x92\x27\xa6\xc8\x5a\x78\xbe\xa1\x7e\x3f\x50\x8e\x0d\xfe\x2d\xc7\x57\xce\x85\x69\xfc\x17\xd5\xec\x17\xf4\xeb\x81\xbf\x0d\xff\x33\xd0\xf0\x92\x96\x01\xef\x21\x39\x64\x3a\x7c\x81\x88\xb7\xd1\xba\x19\xa0\xd6\xf4\x53\x3a\xa7\xc9\xf5\x1b\xab\xc7\x5d\xde\xb7\x7e\x63\x65\x42\xd6\x78\x37\xa1\x07\x27\x39\xf7\x10\x5f\x01\x8d\x5b\xc2\x52\x46\x52\x98\x6f\xe5\x7a\x87\x63\x47\x04\xa2\x86\x6a\x4d\x38\x5a\x5c\xfc\x1c\x6f\xfb\x66\x64\x9a\xbf\x51\xf5\x7d\xce\xc3\x39\x3b\xd2\xb8\xcd\x5f\x7b\xf0\x8b\x53\xea\x29\x1c\x1d\xc5\x93\x50\xfc\xec\xe2\x3d\x91\x8d\x25\xa7\x9e\x93\x96\x25\xee\xa1\x0f\x1a\xb7\x41\xe8\xcb\x4c\x9d\xf2\x05\x47\x59\x3b\xc7\xfe\x04\x00\x00\xff\xff\x9f\x37\x12\x38\xfc\x05\x00\x00")

func tmpl_server_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_server_tmpl,
		"tmpl/server.tmpl",
	)
}

var _tmpl_service_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x6a\x83\x40\x10\x86\xcf\xd9\xa7\x18\x3c\x25\x12\xcc\xbd\xc7\xf4\xd2\x53\x29\x69\x1f\x20\xcb\xf2\x27\x6c\xab\xbb\x9b\xd9\x49\x51\xc4\x77\x2f\xba\x46\x25\x34\x90\x93\xfa\xf3\xcf\xe7\x37\x13\xb4\xf9\xd1\x67\x50\xdb\x52\xf1\x91\xde\xdf\x75\x05\xea\x3a\xa5\x6c\x15\x3c\x0b\x65\xc6\x3b\x41\x2d\x99\x52\xbb\x1d\x7d\x82\x7f\xad\x01\xd9\x48\x9a\xa2\xad\x42\x09\xb2\x4e\xc0\x27\x6d\x40\x27\xcf\x7d\x9c\x3a\x85\x92\x26\x60\x9e\x98\x5a\xad\x5a\xbd\xa1\x2c\xfd\xda\x48\x4d\x23\xbd\x78\x4d\xcf\x2d\x05\xca\x0f\xb8\x5c\x11\x65\x43\xeb\xfc\x80\x18\xbc\x8b\xd8\x12\x98\x3d\x6f\xd4\x6a\xdf\xe0\xff\x41\xc6\x85\xf2\x7d\x83\xc5\xf4\xf0\x75\x07\xe8\x86\x3d\xc6\x12\x05\x46\x84\x93\x7e\x1b\x4e\xd1\xa8\x7d\x2b\x44\xe1\xab\x91\xde\x79\x38\x4c\x14\xb6\xee\x4c\xc7\xef\xe8\xdd\x4b\xe6\x74\x85\xec\x38\x21\xd3\x9f\xa8\x28\x26\xc6\x98\xcc\x90\x2f\xd4\x72\x07\x19\x8e\x7b\x83\xcc\xfe\x8f\xd5\x16\x9d\xe7\xed\x16\xa7\x98\x05\x97\xe1\x73\x8e\x7f\x01\x00\x00\xff\xff\x3a\x5f\xe1\x0d\x31\x02\x00\x00")

func tmpl_service_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_service_tmpl,
		"tmpl/service.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"tmpl/crud.tmpl": tmpl_crud_tmpl,
	"tmpl/crud_handler.tmpl": tmpl_crud_handler_tmpl,
	"tmpl/dao.tmpl": tmpl_dao_tmpl,
	"tmpl/endpoints.tmpl": tmpl_endpoints_tmpl,
	"tmpl/entity.tmpl": tmpl_entity_tmpl,
	"tmpl/handlers.tmpl": tmpl_handlers_tmpl,
	"tmpl/main.tmpl": tmpl_main_tmpl,
	"tmpl/server.tmpl": tmpl_server_tmpl,
	"tmpl/service.tmpl": tmpl_service_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"tmpl": &_bintree_t{nil, map[string]*_bintree_t{
		"crud.tmpl": &_bintree_t{tmpl_crud_tmpl, map[string]*_bintree_t{
		}},
		"crud_handler.tmpl": &_bintree_t{tmpl_crud_handler_tmpl, map[string]*_bintree_t{
		}},
		"dao.tmpl": &_bintree_t{tmpl_dao_tmpl, map[string]*_bintree_t{
		}},
		"endpoints.tmpl": &_bintree_t{tmpl_endpoints_tmpl, map[string]*_bintree_t{
		}},
		"entity.tmpl": &_bintree_t{tmpl_entity_tmpl, map[string]*_bintree_t{
		}},
		"handlers.tmpl": &_bintree_t{tmpl_handlers_tmpl, map[string]*_bintree_t{
		}},
		"main.tmpl": &_bintree_t{tmpl_main_tmpl, map[string]*_bintree_t{
		}},
		"server.tmpl": &_bintree_t{tmpl_server_tmpl, map[string]*_bintree_t{
		}},
		"service.tmpl": &_bintree_t{tmpl_service_tmpl, map[string]*_bintree_t{
		}},
	}},
}}
