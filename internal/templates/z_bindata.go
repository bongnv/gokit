package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _tmpl_crud_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xcd\x6e\xdb\x30\x10\x84\xcf\xe1\x53\x2c\x78\x4a\x82\x54\xba\x14\x3d\xe8\x6a\x19\x46\x00\xa3\x31\x92\xf8\x54\x14\x30\x21\xaf\x15\xd6\xb6\xa8\x90\xeb\x36\x85\xaa\x77\x2f\x68\xca\x92\x7f\x48\xc1\x69\x9d\x93\x7e\x66\xb4\xfb\x61\xc4\xdd\x52\x64\x4b\x91\x23\x54\x15\x44\x13\x77\xff\x55\xac\x11\xea\x9a\x31\xb9\x2e\x95\x26\xe0\x99\x2a\x08\xdf\x88\x33\x46\xbf\x4b\x67\x6d\x3c\x60\x48\x6f\x32\x82\x8a\xd5\x8c\xc5\xf1\xbe\xf4\x84\xfa\xa7\xcc\x10\xa4\x01\x01\x83\xc7\x69\x0a\xb2\x20\xd4\x0b\x91\x21\x2c\x94\x06\x71\x58\xc7\xb9\x23\x16\xc7\xb9\x4a\x72\x2c\x50\x0b\x42\xc8\xd5\x52\xd2\x4e\x84\x4f\x5d\x85\xd3\x46\x27\x6c\x2d\x40\xf7\x11\x03\x00\xb0\x1d\x96\x92\x12\x58\x23\xbd\xa8\x79\xc2\x47\xc3\x67\x0e\xa5\xa0\x97\x84\xc7\xed\xf7\x7f\x80\xd4\x58\xfd\x42\xbd\xbd\x9b\xac\x36\x5a\xac\xa0\xae\xe3\xea\x3e\xad\x39\xbb\x1a\x21\x5d\x67\xf4\x06\x4d\x34\xd1\xc0\x5d\xef\x40\xe3\x2b\xdc\x8e\x90\xf6\x40\x1e\xf1\x75\x83\x86\x6e\xe0\xfa\x44\x30\xa5\x2a\x0c\xde\x01\x6a\xad\xf4\x0d\xfb\x7f\x3e\xce\xae\xc6\xd2\xf4\xb1\x59\xd9\x0f\x77\xa2\x9c\x45\x37\x79\x78\x7a\x0f\x9e\xad\x31\xd0\x28\x08\x7b\x18\x9d\xc1\x4f\xe9\xd1\xce\xe3\x9c\xbe\xfb\x2f\xdb\x3a\xd3\x72\xde\xcf\xea\x0c\x7e\x56\x8f\x76\x16\x6b\x3a\x1c\x0f\x9f\x87\xff\x82\x9b\xe2\x0a\x7b\x71\x9d\xc1\x87\xbb\x25\x6a\xe6\xd8\x7b\x80\x21\x8a\x22\x37\x65\x7e\xb9\xdd\x05\x16\xe4\x3e\xb5\xcf\xb2\xc8\x61\xf6\xc3\xa8\x22\xe1\x72\xce\x67\x81\xea\x2e\x93\x70\xf9\x46\x3f\xa8\xbf\xbf\x3c\x6e\xf7\x1f\x9a\x76\x55\xd5\x66\xb5\x93\xda\xfe\xfe\x11\xe8\xfa\x07\xf4\x83\xfe\x0f\x8b\x85\x41\xb2\xcb\xe5\xcb\xe7\x5d\x4f\xb5\x7d\xc7\x67\x5b\xc3\x58\xae\x25\xc1\xa1\x61\x65\xdf\x85\x31\x8e\x73\x08\x19\x8e\x83\x68\x8f\x42\x1b\xc2\xb7\xef\x81\x4c\xfa\xa7\x73\x47\x16\x9a\xbf\x0e\x2d\xe8\xb8\xd8\x4f\x0a\xce\x79\x2f\xc4\xa5\x8f\x4a\x68\xba\x3b\x88\xa0\xe3\x23\x19\x8e\x93\x08\x5b\x2e\x46\x11\x5a\x1c\x1d\x44\xd0\x71\xde\x62\xf8\x1b\x00\x00\xff\xff\xa4\xc5\xaf\xe4\x8a\x08\x00\x00")

func tmpl_crud_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_crud_tmpl,
		"tmpl/crud.tmpl",
	)
}

var _tmpl_crud_handler_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x51\x6f\x9b\x3a\x14\x7e\xc6\xbf\xe2\x5c\x74\x7b\x85\x2b\x4a\x7a\x5f\x2b\xe5\x4a\x57\xed\xd6\x4d\xaa\xda\x6e\xda\x9e\xa2\x3c\xd0\xe4\x40\xad\x82\x4d\x6c\xb3\x35\x42\xfc\xf7\xc9\x36\x24\x34\x81\x16\xa4\x55\x7b\x6a\x39\x9c\xef\xf8\x3b\xdf\xf7\xc9\xa4\xaa\xce\xe0\x6f\x96\x17\xd9\x6d\x9c\x23\x5c\xcc\xa1\x90\x8c\xeb\x04\x7c\x53\x3b\x51\x9f\x62\xbe\xce\x50\xfa\x10\xd9\xf7\x67\x75\x4d\x2c\x62\x1d\x8b\x43\xc0\x89\xba\xfa\xff\xae\xdb\x48\x8a\x78\xf5\x14\xa7\x08\x8f\x6e\x88\x22\x84\xe5\x85\x90\x1a\x02\xe2\xf9\x2b\xc1\x35\x3e\x6b\x9f\x78\x3e\x4a\x29\xa4\xf2\x09\xf1\xfc\xaa\x82\xe8\xbe\x81\xd5\xb5\x7f\x54\x99\x31\xae\x51\xf2\x38\x9b\x29\x2d\x64\x9c\xa2\x69\x49\x99\x7e\x2c\x1f\xa2\x95\xc8\x67\x0f\x82\xa7\xfc\xc7\x2c\x15\x4f\x4c\xcf\x4a\xcd\xb2\x19\x72\xcd\xf4\x76\xb6\x29\x51\x6e\xdf\x6c\xce\x44\xea\x13\x4a\x08\xd1\xdb\x02\xa1\xaa\x3a\xd2\xd4\x35\x28\x2d\xcb\x95\x86\x8a\x78\xe6\x4d\x2b\x81\x7d\x61\xb9\x44\x2f\xcb\xa4\x26\x24\x29\xf9\x0a\x02\x06\xa7\x07\xb3\x28\x5c\xa3\x0e\x56\xfa\x19\x1a\x1d\xa2\x4b\xf7\x37\x04\x89\x1b\xdb\xde\x6e\xdd\x20\xa2\x6b\xd4\xa6\xda\x3c\x7e\xc5\x4d\x89\x4a\x53\x08\xc6\xf4\xaa\x42\x70\x85\x21\x58\xa5\xa9\xd9\xc0\xca\xc2\x50\xd9\x9a\xb1\x91\x1d\xb0\x8f\xbe\x18\xc5\x0c\xc5\x90\x78\x9e\x95\x2f\xfa\xb0\x29\xe3\x2c\xf0\xd9\xda\xb7\x34\xa3\xcf\x57\x74\xff\xf2\x86\xe5\x4c\x07\xff\x9a\x0a\x25\xc4\x63\x89\x9d\xfc\xd7\x1c\x38\xcb\xcc\x89\x9e\x44\x5d\x4a\x6e\x1e\xed\xa1\xc4\xab\x5d\x5b\x86\x3c\x68\xe9\x50\x98\xcf\xe1\xbc\xaf\x5d\x48\x15\xdd\xe2\xcf\xc0\x6f\xd3\x74\x01\x12\x95\x28\xe5\x0a\x81\x0b\x0d\x89\x28\xf9\xda\xa7\x6e\x6a\x83\xfd\x07\x9f\x0b\xe4\x0a\xd5\x80\x20\xe6\x98\x4e\xf9\x02\x5c\x58\xbe\x89\x4e\x71\x47\x6d\x71\xbe\x34\xbb\xd5\xa1\xa1\xf4\xba\xb7\x37\x4c\x4d\x34\xd7\x20\x46\xbb\x7b\xd4\x7c\x6c\x6f\xc2\x32\x8d\x52\x19\x63\x17\x4b\xe7\x8f\xf5\xb3\x6a\x34\x37\xee\xdd\x25\x89\x42\x0d\xff\x35\x7a\xb7\x90\x39\xc4\x45\x81\x7c\x1d\x34\x85\x10\x1c\xde\xb5\x07\x7b\x24\xa5\x3b\x0b\x4d\xd1\xfa\x3f\x7a\x9a\x4b\xcb\x0e\xd7\xce\x9a\x12\x4b\x68\x46\x46\x51\x34\x25\x70\x1a\x73\xab\x4b\x1e\x3f\x61\xb0\x58\xf6\x09\xdc\x11\x37\x7c\x19\x4f\x4a\xbc\x44\x48\x60\x61\x13\x15\x33\x48\xc6\x3c\x45\x68\x5b\xec\xc9\xf6\x90\x05\x5b\xc2\x7c\x38\x52\xdb\x83\xac\x8e\x37\xba\x89\xad\x16\xf7\x59\x29\xe3\xac\x93\x5f\x7b\xee\xc8\x90\x5e\x4a\x8c\x35\x4e\x8b\xa9\xc3\x8c\x0e\x6a\x4f\xfb\xc0\x4d\x64\x85\x74\xff\x7d\x94\x22\xef\x8a\x65\x32\xd2\x79\xa6\xc4\x1b\x8a\xc6\x7e\xa3\xd6\x1e\x3a\x3a\x16\xaf\xb8\x30\xb8\xc5\xf8\xeb\x63\x3b\xf6\xe6\xf8\x5e\xac\x27\x9b\xe2\x30\xa3\x4d\xe9\x69\x7f\x4f\x53\xf6\x1b\xfd\x56\x53\x06\xb7\x78\x07\x53\xae\x30\xc3\xa9\xa6\x38\x4c\x9f\x29\x56\xe4\x3f\xfb\x09\x9e\xf4\xf5\x7d\x61\xc5\x11\xc5\xbd\x36\x21\x74\xbf\x94\x3b\x45\x87\xe5\x87\xd3\xce\xef\xa6\x5d\x92\x7a\xd5\xec\x34\x18\x76\x66\x31\x37\x62\xde\x97\xa0\x37\xc3\xd3\x19\x57\xd5\x07\x4c\x0f\x93\x6e\xae\xd4\xb7\x38\xd1\xde\x55\x1a\xa6\x76\xc0\x08\x9e\x3d\x13\x2c\xb9\x5f\x01\x00\x00\xff\xff\xd6\xbd\x96\x14\xa2\x0b\x00\x00")

func tmpl_crud_handler_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_crud_handler_tmpl,
		"tmpl/crud_handler.tmpl",
	)
}

var _tmpl_dao_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\xc1\x6e\xdb\x3a\x10\x3c\x8b\x5f\xb1\x10\x5e\x02\x29\x70\xc8\x7b\x80\x77\x48\xa2\x16\xc8\xc5\x69\x91\xf6\x54\x14\x01\x25\xad\x65\x36\x12\xa9\x90\x2b\xb7\x8e\xa0\x7f\x2f\x28\x31\xae\x6a\x27\xa8\x01\x9f\x6c\x68\x67\x67\x67\x66\x97\x7d\x7f\x09\xff\x95\xd2\x2c\x65\x83\x70\xf5\x3f\xb4\x56\x69\x5a\x41\x7c\xe6\xb2\xeb\xfb\x18\xf8\xf8\xfd\x72\x18\xd8\x2b\xf0\xae\x69\xeb\x39\x50\x35\x6d\x7d\xe6\xe2\x3f\x24\x1e\xcc\x5a\x59\x3c\xc9\x0a\xa1\xef\x81\x7f\x9a\xfe\x8f\x45\x5f\x53\x4d\x6b\x2c\x41\xc2\x00\x00\xe2\xc2\x68\xc2\x5f\x14\x33\x16\xc5\x95\xa2\x75\x97\xf3\xc2\x34\x22\x37\xba\xd2\x1b\x51\x99\x27\x45\xa2\x23\x55\x0b\xd4\xa4\x68\x2b\x4c\x4b\xca\xe8\x78\x6a\x3e\xa6\xe1\xb9\x43\xbb\x3d\xc4\xff\x50\xfa\x65\xdd\x89\xca\xd8\x26\x66\xd1\xe3\x7b\x35\x51\x2a\x59\x63\x41\x4e\x34\x5b\xf7\x5c\xc7\x20\x04\x28\xad\x48\xc9\x5a\xbd\x20\x8c\x1f\x59\xca\x18\x6d\xdb\xd1\xed\x2e\x86\x61\x00\xa5\x09\xed\x4a\x16\x08\x3d\x8b\x6e\x2d\x4a\xc2\x24\xd8\xe5\xb7\xd3\xef\x02\x2e\x7c\x44\xa1\x23\x05\xb4\xd6\x58\x16\x7d\xf6\x9a\x0f\xb1\x9c\xf3\xd1\x0d\x1f\xeb\x29\x24\xdf\xbe\xcf\xdb\x17\x53\x7b\x3a\x7a\xfd\xda\x96\x47\xcf\xf3\xf8\x0c\x6b\x3c\x16\x3f\x30\x26\x04\x2c\xf1\xe7\x9e\x61\xd3\xa2\x76\x50\x18\xad\xb1\xf0\x5b\x72\x40\x06\xb2\x1b\xd8\x28\x09\xb4\x46\xa8\xd4\x06\x35\x64\x0f\x4b\x0e\x77\x04\x16\xa9\xb3\xda\x81\xd4\x90\x5d\xdf\x7b\xa8\x2c\x0a\x74\x6e\x84\x96\x92\x64\x2e\x1d\x72\xb6\xea\x74\x71\x38\x2b\x29\x73\xb8\xf0\x0b\xe2\xd9\x4d\xba\x1f\x7c\xcf\xa2\x89\x1c\xce\x43\x65\xbc\xda\x61\xe8\x59\x14\x95\xf9\x15\x94\xf9\x82\x45\x83\xf7\x31\xdf\x5b\x00\x81\x23\xdb\x15\xe4\x59\x66\x43\x3c\x78\x94\x92\xa8\x31\x93\x59\x43\x0a\x61\xb9\x8f\x70\x10\xdf\x74\x84\x6f\xa5\x38\xa9\x74\x5d\x4d\xfe\x39\x29\x5e\xe6\x3c\xd0\x4c\x3d\xe9\xce\xc4\x84\xe2\x1f\x5e\xb3\x7f\x57\xc6\x74\x36\x6f\xa8\xf0\x57\xa3\xd0\x1d\x7b\x40\x5e\xda\x46\xda\x30\xd8\xc1\xdf\xa8\xb9\xec\x89\xed\x8b\x95\xda\xad\x8c\x6d\x12\x6f\x63\x37\x8e\x73\x9e\xf2\x8f\x4a\x97\xc9\x79\x60\xda\xf7\xe4\x16\xc7\x9b\x0b\x07\x7d\x6a\xc6\x0f\x72\x73\x42\xc2\xe1\x95\x9c\x2a\x22\xd0\xfc\x43\xc6\xef\x00\x00\x00\xff\xff\xa9\x49\xe3\x60\x9c\x05\x00\x00")

func tmpl_dao_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_dao_tmpl,
		"tmpl/dao.tmpl",
	)
}

var _tmpl_endpoints_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\xdf\x6a\xe3\x3c\x10\xc5\xaf\xa5\xa7\x18\x4c\x0b\x36\x34\x0a\xbd\x0d\xe4\xea\xa3\x17\x1f\x2c\x4b\xd9\xdd\x17\xd0\xda\x93\x44\x24\x96\x9c\x91\x9c\x66\x11\x7a\xf7\x45\xf2\x9f\x28\x4d\xb6\xed\x45\x08\x96\xce\x9c\x39\xfa\x8d\xe4\xfd\x02\x1e\x3a\x59\xef\xe5\x16\xbf\xcb\x16\x61\xb5\x06\xf1\x9a\x7d\x2f\x42\xe0\x49\x64\x91\x4e\xaa\xc6\xff\xb5\x43\xda\xc8\x3a\x29\x3b\x52\xda\x6d\xa0\x78\xb4\xe2\xd1\x16\xd7\x85\xe2\x6e\xf9\xdc\x63\xde\xe5\x63\x77\xf0\x1e\x9c\xf9\x66\xde\x90\xae\xd5\x51\xa3\xda\xce\x90\x83\x92\xb3\xa2\x36\xda\xe1\xd9\x15\x9c\xb3\x62\xab\xdc\xae\xff\x2d\x6a\xd3\x2e\xb7\x66\xb1\x57\x6e\x19\x7f\xa8\x9b\xce\x28\xed\x0a\xce\x0a\xef\xe7\x54\x10\x42\xc1\x2b\xce\x97\x4b\x98\x14\x16\x84\x10\xdc\xfd\xe9\x30\x5b\xb2\x8e\xfa\xda\x81\xe7\xde\x03\x49\xbd\x45\x78\x98\x36\x53\xf2\x97\x59\x19\x02\x67\xe9\x70\xd3\xbe\x18\x03\x4f\x92\xd9\x75\x2e\x8a\xa6\xa8\x9b\x74\xf2\x90\xb2\xb4\x72\x8f\x17\x4b\x42\xd7\x93\xb6\x20\x35\xbc\xbc\x4f\xf4\xb6\x43\x42\x40\x59\xef\x66\x5f\x50\xfa\x64\xf6\x68\xa3\x91\xdb\x21\xd4\x86\x08\x6d\x67\x74\xa3\xf4\x16\x5a\x74\x3b\xd3\x80\xd1\x69\xaf\x23\x73\x52\x0d\x36\x30\xc2\x15\x7c\xd3\xeb\xfa\xba\x7f\x69\xe3\x18\x6e\x67\x1d\x42\x95\x11\xf2\x9c\x0d\x39\x2f\x6b\x3e\x92\xf8\x02\xae\x8f\x79\xad\x52\x9a\x98\xe0\x5f\x8a\xd2\x56\x4f\xa9\xd5\x04\x91\x25\x8e\x5f\xe9\xfd\x8e\x75\x8e\x7a\x2e\x3a\x29\x39\xb0\x92\xd6\xde\x25\xf5\x71\xb6\xcf\xe1\xcd\x91\x32\x88\xd1\xbc\xac\xdd\x19\xc6\xab\x2d\xfe\x1b\xfe\x9f\x80\xf0\xd8\xa3\x8d\x53\x1e\xbd\x7c\xa8\xa0\xcc\xbe\x9e\x00\x89\x0c\x55\xd1\x8d\x9d\x24\xc5\x17\xc2\x58\xbc\x02\x79\x4d\x5c\x43\xa2\x41\xcb\x19\xab\xd2\x1c\xe0\xe1\x80\x1b\xf7\x53\x35\xe9\x41\x16\xb1\x28\xd9\x15\x03\xd7\x34\x29\xb5\x01\x3c\x42\x79\x40\x9d\x1d\xfb\x07\xda\xfe\xe0\x6c\x05\xcf\xc3\x48\x87\x99\xce\x66\x6b\x28\xae\x5c\xd2\xa8\xe2\x23\x66\xde\xdf\xf5\x7b\x95\x24\xdb\x68\x37\x15\x5c\xbc\x42\x80\x35\x58\x71\x8f\x7a\x24\x56\x0d\x57\xe1\x60\x31\xbb\x5c\x23\xb4\x5f\xf1\x55\xaf\xd6\x11\x57\x83\xe7\x9b\x76\xf0\x5c\x89\x24\x49\x85\x84\xc7\xa8\x1d\x4b\x45\x19\x1b\xe6\x3e\x21\xdc\x30\xfb\x24\x5a\x1a\x5e\xc5\xb3\xf3\xb3\x69\xde\x33\xe9\xe1\xf2\x7a\x8f\xba\x09\xe1\x6f\x00\x00\x00\xff\xff\xd0\xc2\x71\xf6\x8a\x05\x00\x00")

func tmpl_endpoints_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_endpoints_tmpl,
		"tmpl/endpoints.tmpl",
	)
}

var _tmpl_entity_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xcb\xb1\x0a\xc2\x30\x18\x04\xe0\xb9\x79\x8a\xa3\xbb\xc9\x22\x0e\xdd\x44\x17\x17\x27\x9d\x6d\xb0\x3f\x21\xb4\x49\x4a\xbc\x0e\xa1\xf4\xdd\xa5\xa2\xa0\x9b\x37\x1d\xc7\x77\xca\x18\xcc\x33\xf4\xd9\x06\xc1\xb2\x40\x6b\xad\x8c\x71\xa9\x71\x12\x25\x5b\x0a\x5c\xea\x3d\x21\x91\x9e\x05\x9b\xb8\xba\xaf\x83\x62\x19\x7f\x06\x3c\x98\xa7\x3b\x31\xab\xea\x74\xc4\x3b\x3e\x72\xb7\x7d\xb5\xd6\xa5\x1c\x9a\x7a\xcc\x3e\xd8\x5c\x6e\xbd\x94\xba\x55\xd5\x21\x8b\xa5\x74\x7b\x82\x3e\x88\xbe\xf8\x20\x1f\x19\x13\x11\xa7\x61\x58\xd9\x75\xec\xfe\x60\x8b\x7a\x06\x00\x00\xff\xff\x6a\x46\xd0\xfb\xd5\x00\x00\x00")

func tmpl_entity_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_entity_tmpl,
		"tmpl/entity.tmpl",
	)
}

var _tmpl_handlers_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x41\x4e\xc3\x30\x10\x45\xd7\x9d\x53\x7c\x65\x81\x92\x2a\x4a\xef\x50\x36\xb0\x89\x10\x9c\xc0\x98\xa1\xb1\x70\xec\x74\x3c\x21\x8d\xa2\xdc\x1d\x95\x46\x90\x45\x41\xb0\xb1\x17\xfe\xdf\xef\xfd\xce\xd8\x37\x73\x60\x34\x26\xbc\x78\x96\x44\xe4\xda\x2e\x8a\x22\xa7\x4d\x66\x63\x50\x3e\x69\x46\xb4\xc9\xa6\x09\xd5\xc3\x12\x9e\xe7\x8c\x0a\x22\x1d\xbb\xaf\xe2\x7d\xdb\x79\x24\x95\xde\x2a\x26\x9a\x89\x5e\xfb\x60\x91\x37\xd8\xae\x02\x05\xee\xd8\xfb\x98\x5b\x3d\x61\xf9\xbb\xba\xbd\xdc\x25\x84\x8f\xd8\xae\x28\xb5\x69\xcf\xa4\xea\x91\x8f\x3d\x27\x2d\x90\x5f\x7f\x4d\x5d\x0c\x89\x4b\xb0\x48\x94\x02\x13\x6d\x84\xb5\x97\x80\xe0\x7c\x79\x3e\x7e\xb6\xd9\x8f\xfc\x3f\x97\xfd\xc8\xbf\xeb\x7c\x06\xfe\x64\xb4\xdb\xa1\xe6\x01\x56\xd8\x28\x27\x18\x04\x1e\x90\x58\xde\x9d\x65\x0c\x4e\x1b\x3c\xf7\xc9\x05\x4e\x09\x3e\x1e\x9c\xad\x2e\x1b\x6a\x1e\xf2\x02\x57\xc8\x4f\x4b\xf5\x9b\x76\xb3\xda\x3a\xcd\x34\xd3\x47\x00\x00\x00\xff\xff\x91\xab\xfd\x00\xec\x01\x00\x00")

func tmpl_handlers_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_handlers_tmpl,
		"tmpl/handlers.tmpl",
	)
}

var _tmpl_main_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xb1\x8a\xc3\x30\x0c\x86\x67\xeb\x29\x84\x27\x1b\x82\xb2\x17\x3a\xdf\x76\x57\xe8\x78\xdc\xe0\x26\x3a\xc7\x34\xb1\x8d\xe2\xa4\x43\xc8\xbb\x1f\x4d\x72\xd0\xa9\x93\x10\xff\xaf\x4f\x5f\x76\xcd\xdd\x79\xc6\xc1\x85\x08\x10\x86\x9c\xa4\xa0\x01\xa5\xfb\xe4\x35\x80\xd2\xcb\x82\x74\x39\x4a\xeb\x5a\x87\x58\x58\xa2\xeb\xeb\xce\xc5\xb6\x67\x19\xf5\x9b\xce\xc8\x32\x87\x86\x35\x28\x9f\xee\xa1\x5c\x59\x66\x16\xd4\x3e\x94\x6e\xba\x51\x93\x86\xfa\x96\xa2\x8f\x73\xbd\xc5\xf5\x54\xc2\x7e\xc3\xa2\xc1\x02\xfc\x4e\xb1\xd9\xc4\x8c\xc5\x05\x54\xca\x65\xc4\xd3\x19\xbf\x7f\x5e\x68\xf4\x95\x4b\x48\x71\x59\x8f\xfc\x8c\x2e\x67\x8e\xad\x79\x6e\x15\x1e\x06\xf4\xc1\x65\x2f\x8e\xe6\x5f\x9c\x3e\xf9\x61\xac\x25\x22\x0b\xa0\x58\xe4\xc9\x7e\x25\x6f\xc3\x80\xda\xc0\x44\x54\x81\xb2\x00\xa0\xfa\xe4\xe9\x22\x21\x96\x3e\x1a\x7d\xdd\x1f\xe0\x58\x52\xce\xdc\xe2\x23\x94\xee\xa4\x2b\x64\x11\x0b\x2b\xfc\x05\x00\x00\xff\xff\xb8\x92\x81\x77\x5f\x01\x00\x00")

func tmpl_main_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_main_tmpl,
		"tmpl/main.tmpl",
	)
}

var _tmpl_server_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xdb\x4e\xdc\x30\x10\x7d\xb6\xbf\x62\x1a\x01\x4a\xaa\xc5\x11\x7d\xa4\xe2\xa5\x2d\xbd\x48\x14\x56\x88\xb6\x0f\x55\x55\x85\x64\x36\xeb\xb2\x6b\x67\x1d\x87\x8b\x2c\xff\x7b\x35\x4e\x1c\xf6\x02\x54\x45\x22\x9b\x8c\xcf\x9c\x39\x73\xf1\x38\x77\x08\x7b\x4d\x51\xde\x14\x35\x9e\x17\x4b\x84\xe3\x13\x10\xd3\xb5\x6f\xef\x79\xc0\xb4\x68\x6e\x65\x89\x5f\x94\x45\x33\x2b\xca\x00\x6c\x8c\x54\x76\x06\xc9\x7e\x2b\xf6\xdb\x64\xd3\x4f\x84\xe7\xe1\x96\xfb\x18\x22\x72\xf3\x21\x36\x38\x07\x56\x9f\xe9\x3b\x34\x9b\x60\xc2\xc8\x65\xa3\x8d\x85\x94\xb3\xa4\xd4\xca\xe2\xbd\x4d\x38\x4b\x50\x95\xba\x92\xaa\xce\xff\xb4\x5a\x91\x41\x6a\x7a\x2a\xb4\xf9\xdc\xda\x26\xe1\x9c\x25\xb5\xb4\xf3\xee\x5a\x94\x7a\x99\x5f\x6b\x55\xab\xdb\xbc\xd6\x37\xd2\xe6\x9d\x95\x8b\x9c\xc2\xa0\x21\x1f\xe7\x46\xf1\xe0\xfd\xae\x25\x97\x94\xb6\x2a\x16\x39\xaa\xaa\xd1\x52\x05\x01\x2f\x92\x93\x04\x7a\x49\x78\xc6\x79\x9e\xc3\x27\xb4\x17\x8d\x95\x5a\xb5\x20\x84\xe0\xb3\x4e\x95\x6b\xb6\xb4\xa5\x02\xec\x16\x19\xbc\xcf\xe0\xe7\xaf\x5e\xa9\xe8\xc1\xe0\x38\xeb\x0d\xa7\x83\x98\x96\x4a\xba\x2c\x6e\x70\x34\xa4\x6d\xc6\x39\xd3\x4d\x7f\xb4\x45\xe0\x7c\x3c\x3b\x81\xa2\x69\x50\x55\x29\x7d\x4d\x6a\xb4\x9f\xaf\xae\xa6\xa3\xa4\xcd\x18\x99\x10\x62\x42\xac\x06\x6d\x67\x14\x90\x0b\xf7\xbc\xcf\xe4\x65\x57\xc0\x91\xe4\xa9\x64\xfe\x53\x26\x67\xce\x99\x42\xd5\x08\x7b\x91\x37\x8c\xd4\x63\x38\x9a\x3a\x36\xd4\x48\xfc\x90\x76\x4e\xda\xe2\xf1\x20\x6e\x84\x3b\xce\x18\xfb\x8a\x76\xae\xab\x63\x88\x7f\xd4\xff\x91\x5d\xf4\xa7\x34\x19\x13\x02\x4f\x0b\x3b\x7f\x84\x6e\x83\x29\x16\x21\x46\x78\x0c\x14\x5d\xb6\x8a\x23\x36\xbc\x87\x99\x8f\xa7\x44\x40\xf7\x47\xce\x00\x57\x90\x2e\x50\xad\x61\xa7\x85\x29\x96\x6d\x06\x47\x21\x5d\x76\x89\xab\x0e\x5b\xfb\x01\x4b\x5d\xa1\x39\x06\x25\x17\xbd\x3b\xe0\xa2\x0d\x17\xe9\x09\x50\x15\x5e\x76\x24\x78\x3f\x00\x23\x83\xaa\x86\xaa\xfa\x2c\x34\xe0\xd1\xf2\xc4\x48\x38\x07\x2f\x37\x28\x6c\x05\x4a\xaa\xc6\xe7\x92\x7a\xe3\x7d\x3f\x5a\xff\x52\x98\xfe\x86\x61\x29\x88\xf7\xfd\xef\x04\x0c\xbc\xa6\xfb\x27\x06\x48\x06\xa9\xe9\xdf\x40\xc6\xab\xe5\xfc\x04\xd0\x18\xfa\xd7\x26\xa3\x31\x0c\x7b\x6a\xc0\x5d\x3d\x34\x61\x4f\xa5\x52\x55\x78\xbf\x23\x0f\x8e\x32\x11\x20\xa1\x02\x06\x57\x84\xa5\x8c\x94\xb4\xdf\x8b\x45\x87\x9b\x44\xb4\xc3\x18\xb5\xd0\x18\x02\xc6\xd5\x20\xfa\x2e\x7c\xbb\x3c\x4b\xcd\x04\x0c\xae\xb2\xb7\x01\xf2\xea\x84\x7a\x47\x92\x62\x61\xa9\x95\x74\xc4\x99\xe7\x6c\x9d\x8a\x56\x9f\x38\xc7\xbb\xa1\x9f\xa9\x11\xef\x74\xf5\x90\x0d\xcc\xe9\xc1\x0e\xe9\xc1\x41\xfc\x92\x5a\x9c\x5e\x7c\x7c\x2e\xca\xd8\x53\x83\xab\xde\x18\x5a\x46\x5d\x0f\xcd\x43\x55\x79\xcf\xff\x06\x00\x00\xff\xff\x51\x0a\x83\x04\x3e\x06\x00\x00")

func tmpl_server_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_server_tmpl,
		"tmpl/server.tmpl",
	)
}

var _tmpl_service_tmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x6a\x83\x40\x10\x86\xcf\xd9\xa7\x18\x3c\x25\x12\xcc\xbd\xc7\xf4\xd2\x53\x29\x69\x1f\x20\xcb\xf2\x27\x6c\xab\xbb\x9b\xd9\x49\x51\xc4\x77\x2f\xba\x46\x25\x34\x90\x93\xfa\xf3\xcf\xe7\x37\x13\xb4\xf9\xd1\x67\x50\xdb\x52\xf1\x91\xde\xdf\x75\x05\xea\x3a\xa5\x6c\x15\x3c\x0b\x65\xc6\x3b\x41\x2d\x99\x52\xbb\x1d\x7d\x82\x7f\xad\x01\xd9\x48\x9a\xa2\xad\x42\x09\xb2\x4e\xc0\x27\x6d\x40\x27\xcf\x7d\x9c\x3a\x85\x92\x26\x60\x9e\x98\x5a\xad\x5a\xbd\xa1\x2c\xfd\xda\x48\x4d\x23\xbd\x78\x4d\xcf\x2d\x05\xca\x0f\xb8\x5c\x11\x65\x43\xeb\xfc\x80\x18\xbc\x8b\xd8\x12\x98\x3d\x6f\xd4\x6a\xdf\xe0\xff\x41\xc6\x85\xf2\x7d\x83\xc5\xf4\xf0\x75\x07\xe8\x86\x3d\xc6\x12\x05\x46\x84\x93\x7e\x1b\x4e\xd1\xa8\x7d\x2b\x44\xe1\xab\x91\xde\x79\x38\x4c\x14\xb6\xee\x4c\xc7\xef\xe8\xdd\x4b\xe6\x74\x85\xec\x38\x21\xd3\x9f\xa8\x28\x26\xc6\x98\xcc\x90\x2f\xd4\x72\x07\x19\x8e\x7b\x83\xcc\xfe\x8f\xd5\x16\x9d\xe7\xed\x16\xa7\x98\x05\x97\xe1\x73\x8e\x7f\x01\x00\x00\xff\xff\x3a\x5f\xe1\x0d\x31\x02\x00\x00")

func tmpl_service_tmpl() ([]byte, error) {
	return bindata_read(
		_tmpl_service_tmpl,
		"tmpl/service.tmpl",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"tmpl/crud.tmpl": tmpl_crud_tmpl,
	"tmpl/crud_handler.tmpl": tmpl_crud_handler_tmpl,
	"tmpl/dao.tmpl": tmpl_dao_tmpl,
	"tmpl/endpoints.tmpl": tmpl_endpoints_tmpl,
	"tmpl/entity.tmpl": tmpl_entity_tmpl,
	"tmpl/handlers.tmpl": tmpl_handlers_tmpl,
	"tmpl/main.tmpl": tmpl_main_tmpl,
	"tmpl/server.tmpl": tmpl_server_tmpl,
	"tmpl/service.tmpl": tmpl_service_tmpl,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"tmpl": &_bintree_t{nil, map[string]*_bintree_t{
		"crud.tmpl": &_bintree_t{tmpl_crud_tmpl, map[string]*_bintree_t{
		}},
		"crud_handler.tmpl": &_bintree_t{tmpl_crud_handler_tmpl, map[string]*_bintree_t{
		}},
		"dao.tmpl": &_bintree_t{tmpl_dao_tmpl, map[string]*_bintree_t{
		}},
		"endpoints.tmpl": &_bintree_t{tmpl_endpoints_tmpl, map[string]*_bintree_t{
		}},
		"entity.tmpl": &_bintree_t{tmpl_entity_tmpl, map[string]*_bintree_t{
		}},
		"handlers.tmpl": &_bintree_t{tmpl_handlers_tmpl, map[string]*_bintree_t{
		}},
		"main.tmpl": &_bintree_t{tmpl_main_tmpl, map[string]*_bintree_t{
		}},
		"server.tmpl": &_bintree_t{tmpl_server_tmpl, map[string]*_bintree_t{
		}},
		"service.tmpl": &_bintree_t{tmpl_service_tmpl, map[string]*_bintree_t{
		}},
	}},
}}
