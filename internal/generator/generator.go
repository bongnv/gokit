package generator

import (
	"bytes"
	"fmt"
	"log"
	"path/filepath"

	"github.com/bongnv/gokit/internal/iohelper"
	"github.com/bongnv/gokit/internal/parser"
	"golang.org/x/tools/imports"
)

// Generator renders a template to a output.
type Generator struct {
	FilePath               string
	TemplateName           string
	Data                   *parser.Data
	Writer                 iohelper.Writer
	WithAutogeneratedNotes bool
}

// Do generates a file given a template. Then, it uses writer to render output.
func (g *Generator) Do() error {
	buf := &bytes.Buffer{}
	if g.WithAutogeneratedNotes {
		buf.WriteString("// Code generated by gokit v0.0.1. DO NOT EDIT.\n\n")
	}

	err := renderFromTemplate(buf, g.TemplateName, g.Data)
	if err != nil {
		return err
	}

	log.Println("Formatting ", filepath.Base(g.FilePath))
	formatedBuf, err := imports.Process(g.FilePath, buf.Bytes(), nil)
	if err != nil {
		fmt.Println("Failed to format. Content:", buf.String())
		return err
	}

	return g.Writer.Write(g.FilePath, formatedBuf)
}
