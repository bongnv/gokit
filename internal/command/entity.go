package command

import (
	"context"
	"flag"
	"fmt"
	"path"
	"strings"

	"github.com/bongnv/gokit/internal/generator"
	"github.com/bongnv/gokit/internal/parser"
	"github.com/bongnv/gokit/internal/task"
	"github.com/bongnv/gokit/internal/writer"
	"github.com/google/subcommands"
)

const (
	daoTemplateName = "dao"
)

type entityCmd struct {
	path         string
	entityName   string
	entityParser parser.Parser
	writer       writer.Writer
}

func (*entityCmd) Name() string     { return "entity" }
func (*entityCmd) Synopsis() string { return "Generate go-kit codes for accessing data." }
func (*entityCmd) Usage() string {
	return `gokit entity [-directory dir] -name entityName:
  Generate go-kit codes for accessing data.
`
}

func (c *entityCmd) SetFlags(f *flag.FlagSet) {
	f.StringVar(&c.path, "directory", ".", "root path of a go-kit project")
	f.StringVar(&c.entityName, "name", "", "resource name")
}

func (c *entityCmd) Execute(_ context.Context, _ *flag.FlagSet, _ ...interface{}) subcommands.ExitStatus {
	if err := c.Do(); err != nil {
		fmt.Println("Executed with err:", err)
		return subcommands.ExitFailure
	}

	return subcommands.ExitSuccess
}

func (c *entityCmd) Do() error {
	// TODO: validate entity name
	d, err := c.entityParser.Parse(c.path, c.entityName)
	if err != nil {
		return err
	}
	fileName := "z_" + strings.ToLower(c.entityName) + "_dao.go"
	tasks := task.Group{
		&generator.Generator{
			FilePath:               path.Join(c.path, fileName),
			TemplateName:           daoTemplateName,
			Data:                   d,
			Writer:                 c.writer,
			WithAutogeneratedNotes: true,
		},
	}

	return tasks.Do()
}
